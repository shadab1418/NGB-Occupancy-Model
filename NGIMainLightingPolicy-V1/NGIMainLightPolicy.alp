<?xml version="1.0" encoding="UTF-8"?>
<!--
*************************************************
	         AnyLogic Project File 
*************************************************	         
-->
<AnyLogicWorkspace WorkspaceVersion="1.9" AnyLogicVersion="8.7.2.202012241901" AlpVersion="8.7.0">
<Model>
	<Id>1517934684256</Id>
	<Name><![CDATA[NGIMainLightPolicy]]></Name>
	<EngineVersion>6</EngineVersion>
	<JavaPackageName><![CDATA[ngimainpv2_3]]></JavaPackageName>
	<ModelTimeUnit><![CDATA[Minute]]></ModelTimeUnit>
	<ActiveObjectClasses>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1517934684261</Id>
			<Name><![CDATA[Main]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<StartupCode><![CDATA[initModelStructure();]]></StartupCode>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1517934684260</Id>
				<Name><![CDATA[1517934684260]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10 / getScale().pixelsPerUnit(METER) / 60]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>SMALL_WORLD</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1518040800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1517934684258</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1679324068741</CurrentLevel>
			<ConnectionsId>1517934684257</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1518628291669</Id>
					<Name><![CDATA[movesCounter]]></Name>
					<X>110</X><Y>940</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int[][]]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518628291671</Id>
					<Name><![CDATA[simulationTime]]></Name>
					<X>110</X><Y>970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518628291673</Id>
					<Name><![CDATA[hourlySchoolEnergyConsumption]]></Name>
					<X>250</X><Y>910</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518628291675</Id>
					<Name><![CDATA[threshold]]></Name>
					<X>110</X><Y>1000</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[5]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518628291677</Id>
					<Name><![CDATA[automaticSwitchOffTime]]></Name>
					<X>250</X><Y>970</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[20]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518630517964</Id>
					<Name><![CDATA[scenario]]></Name>
					<X>110</X><Y>910</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA["automated"]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521468692097</Id>
					<Name><![CDATA[hourlySchoolEnergyConsumption2]]></Name>
					<X>250</X><Y>940</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521647605743</Id>
					<Name><![CDATA[hourlySchoolEnergyConsumption3]]></Name>
					<X>500</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521729100765</Id>
					<Name><![CDATA[col]]></Name>
					<X>910</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[47]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521729106562</Id>
					<Name><![CDATA[row]]></Name>
					<X>730</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="true">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1 //start from Monday]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521730848760</Id>
					<Name><![CDATA[row1]]></Name>
					<X>780</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[19 //start from monday]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521736723916</Id>
					<Name><![CDATA[hourlySchoolPowerConsumption]]></Name>
					<X>500</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521736780255</Id>
					<Name><![CDATA[row2]]></Name>
					<X>840</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[37]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521736812000</Id>
					<Name><![CDATA[row3]]></Name>
					<X>900</X><Y>990</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[55]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1530105657873</Id>
					<Name><![CDATA[hourlySchoolPowerConsumption2]]></Name>
					<X>280</X><Y>880</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
			</Variables>
			<Events>
				<Event>
					<Id>1518628291684</Id>
					<Name><![CDATA[energyConsumptionCalculation]]></Name>
					<X>690</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1267311998265</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[//excelFile1.readFile();
if (time()%30 == 0){
    hourlySchoolEnergyConsumption = 0;
    hourlySchoolPowerConsumption2 = 0;
     /*if (((int)getHourOfDay() >= 19 || (int)getHourOfDay() <= 8)&&((int)getDayOfWeek()!=1|| (int)getDayOfWeek()!=7)) {
     	 double energy_lights = (lights.sum("power"))/1000 +3 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
    	hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
     	System.out.println(getDayOfWeek() + "i am in 1 ");
     }else if ((int)getDayOfWeek()!=1|| (int)getDayOfWeek()!=7){
     	double energy_lights = (lights.sum("power"))/1000 +1.5 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
    	hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
         System.out.println(getDayOfWeek() + "i am in 2 ");
     }else if(getDayOfWeek()==1||getDayOfWeek()==7){
     
     	double energy_lights = (lights.sum("power"))/1000 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
    	hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
         System.out.println(getDayOfWeek() + "i am in 3 ");
     }*/
     
     if( ((int)getDayOfWeek()>1 && (int)getDayOfWeek()<7) ){

		if (((int)getHourOfDay() >= 20 || (int)getHourOfDay() <= 8)) {
				hourlySchoolPowerConsumption2 = hourlySchoolPowerConsumption2 + lights.sum("power") + 2000 ;
				double energy_lights = (lights.sum("power"))/1000 + 2;          //- lights.sum("trajectPower"))/1000; // converting to KWH
				hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;      //*60;// 0.5 hour because 30 mins
				//System.out.println(getDayOfWeek() + "i am in 1 ");
			 }
		else {
				hourlySchoolPowerConsumption2 = hourlySchoolPowerConsumption2 + lights.sum("power")+ 500;
				double energy_lights = (lights.sum("power"))/1000 + 0.5 ;         //- lights.sum("trajectPower"))/1000; // converting to KWH
				hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;      //*60;// 0.5 hour because 30 mins
				//System.out.println(getDayOfWeek() + "i am in 2 ");
		}

	} else {
			hourlySchoolPowerConsumption2 = hourlySchoolPowerConsumption2 + lights.sum("power");
			double energy_lights = (lights.sum("power"))/1000 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
		    hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
		    //System.out.println(getDayOfWeek() + "i am in 3 ");

	}
     
    //System.out.println(getDayOfWeek());
      // hourlySchoolEnergyConsumption = hourlySchoolEnergyConsumption/(hourlySchoolEnergyConsumption+hourlySchoolEnergyConsumption2+hourlySchoolEnergyConsumption3);
   
    /*excelFile1.setCellValue(hourlySchoolEnergyConsumption,1,row,col );
    excelFile1.writeFile();
    col++;
	if(col==53)
	{
	//col = col + 2;
	row++;
	col = 5;
	}*/
    
    //fileThroughputPerDay.println(hourlySchoolEnergyConsumption);
}

]]></Action>
				</Event>
				<Event>
					<Id>1521468203308</Id>
					<Name><![CDATA[energyConsumptionCalculation2]]></Name>
					<X>690</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1521532800000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if (time()%30 == 0){
    hourlySchoolEnergyConsumption2 = 0;
    
    if( ((int)getDayOfWeek()>1 && (int)getDayOfWeek()<7) ){

		if (((int)getHourOfDay() >= 20 || (int)getHourOfDay() <= 8)) {
		
				double energy_lights = (lights.sum("power"))/1000 + 2 ;          //- lights.sum("trajectPower"))/1000; // converting to KWH
				hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2 + (energy_lights)*0.5;      //*60;// 0.5 hour because 30 mins
				//System.out.println(getDayOfWeek() + "i am in 1 ");
			 }
		else {
				double energy_lights = (lights.sum("power"))/1000 + 0.5 ;         //- lights.sum("trajectPower"))/1000; // converting to KWH
				hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2 + (energy_lights)*0.5;      //*60;// 0.5 hour because 30 mins
				//System.out.println(getDayOfWeek() + "i am in 2 ");
		}

	} else {

			double energy_lights = (lights.sum("power"))/1000 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
		    hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2 + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
		        //System.out.println(getDayOfWeek() + "i am in 3 ");

	}
    
    /*if (((int)getHourOfDay() >= 19 || (int)getHourOfDay() <= 8)&&(getDayOfWeek()!=1||getDayOfWeek()!=7)) {
    	double energy_lights = lights.sum("power")/1000 +3; // converting to KWH
    	hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2 + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
	
    }else if(getDayOfWeek()!=1||getDayOfWeek()!=7){
    	double energy_lights = lights.sum("power")/1000 +1.5; // converting to KWH
    	hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2 + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
	}else if(getDayOfWeek()==1||getDayOfWeek()==7){
     
     	double energy_lights = (lights.sum("power"))/1000 ; //- lights.sum("trajectPower"))/1000; // converting to KWH
    	hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption + (energy_lights)*0.5;//*60;// 0.5 hour because 30 mins
         
     }*/
	//hourlySchoolEnergyConsumption2 = hourlySchoolEnergyConsumption2/(hourlySchoolEnergyConsumption+hourlySchoolEnergyConsumption2+hourlySchoolEnergyConsumption3);
	
	/*excelFile1.setCellValue(hourlySchoolEnergyConsumption2,1,row,col );
    excelFile1.writeFile();
    col++;
	if(col==53)
	{
	//col = col + 2;
	row++;
	col = 5;
	}*/

}]]></Action>
				</Event>
				<Event>
					<Id>1521647473736</Id>
					<Name><![CDATA[energyConsumptionCalculationOriginal]]></Name>
					<X>690</X><Y>930</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1521705600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[/*excelFile.setFileName("EnergyMain2018.xlsx"); */
excelFile.readFile();
if (time()%30 == 0){
    hourlySchoolEnergyConsumption3 = 0;
    hourlySchoolPowerConsumption = 0;
    double energy_lights = excelFile.getCellNumericValue(1,row,col ) + excelFile.getCellNumericValue(1,row1,col );
    hourlySchoolEnergyConsumption3 = hourlySchoolEnergyConsumption3 + (energy_lights);//*1000*2*60//; //converting to power usage per second from KWh
    //hourlySchoolEnergyConsumption3 = hourlySchoolEnergyConsumption3/(hourlySchoolEnergyConsumption+hourlySchoolEnergyConsumption2+hourlySchoolEnergyConsumption3);
    
    
    double power_lights = excelFile.getCellNumericValue(1,row2,col ) + excelFile.getCellNumericValue(1,row3,col );
	hourlySchoolPowerConsumption = hourlySchoolPowerConsumption + power_lights;
	//System.out.println(excelFile.getCellNumericValue(1,row2,col )+ "  " + excelFile.getCellNumericValue(1,row3,col ));
	
	col++;
	if(col==53)
	{
	row++;
	row1++;
	row2++;
	row3++;
	col = 5;
	}
	
}


]]></Action>
				</Event>
				<Event>
					<Id>1538505584844</Id>
					<Name><![CDATA[lightSwitchOffGap]]></Name>
					<X>740</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1538553600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[for ( Office z : offices ) {
//Office z = findOffice("A14");
if(z.officeName.equals("C1")||z.officeName.equals("C2")||z.officeName.equals("C3")||z.officeName.equals("C4")||z.officeName.equals("S1")||z.officeName.equals("S2")||z.officeName.equals("S3")){
}else{
if(z.timeOfficeUnoccupied>0.0){
	//System.out.println(z.timeOfficeUnoccupied);
	//System.out.println(time());
	//System.out.println(abs((int)z.timeOfficeUnoccupied - (int)time()));
		if (abs((int)z.timeOfficeUnoccupied - (int)time())>=10){
		if(z.users.isEmpty() == true){
				for (Light lgt : z.lights) {
					lgt.trajectLightOn = false;
					lgt.lightOn = false;
				}
			}	
		
		
		}
	}
	}	
}]]></Action>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[void]]></ReturnType>
					<Id>1518628291665</Id>
					<Name><![CDATA[initModelStructure]]></Name>
					<Description><![CDATA[This function loads model parameters from the database.

]]></Description>
					<X>790</X><Y>610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// create offices, user agents, assigns user agents to offices,


// create offices

String [] officeNames = { "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A10", "A11", "A12", "A13", "A14", "A15", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B18", "C1", "C2", "C3", "C4", "S1", "S2", "S3", "OOB"};
int [] Capacity =        { 0,   1,     4,    2,    2,     2,   0,     0,    0,     2,     6,     0,    0,      0 ,   0,		1,   0,     1,    2,    1,    1,     1,   1,    1,     1,     2,     4,    0,    0,     0,     1,     1,      32,    0,    0,    0,    0,     0,   0,    0,    0 };
int [] Lights =          { 9,   2,     4,    4,    4,     4,   11,     4,    4,     4,     4,     7,    11,    8,    6,		6,   2,     2,    4,    4,    4,     4,   2,    2,     6,     2,     4,    9,    12,     4,     2,     2,     20,    13,    7,   10,   3,     5,   10,   15,   0 };
int [] Floor =       	 { 1,   1,     1,    1,    1,     1,   1,     1,    1,     1,     1,     1,    1,      1,    1,		2,   2,     2,    2,    2,    2,     2,   2,    2,     2,     2,     2,    2,    2,     2,     2,     2,       2,     1,    1,    1,    1,    1,   1,    1,    0 };

ShapePolyLine [] border = { A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, C1, C2, C3, C4, S1, S2, S3, OOB};
ShapePolyLine [] floor1_zone = { zone1F1, zone2F1, zone3F1, zone4F1 };
ShapePolyLine [] floor2_zone = { zone1F2, zone2F2, zone3F2 };



for ( int i = 0; i < 41; i++ ) {
	Office z = add_offices();
	z.officeName = officeNames[ i ];
	z.officeSize = Capacity[i];
	z.numberOfLights = Lights[ i ];	
	z.shape_line = border[i];
	z.floor = Floor[i];
	Point p = z.shape_line.randomPointInside();
	double target_X= p.getX();
	double target_Y= p.getY();
	if(z.floor ==1){
		for (int j = 0; j<floor1_zone.length;j++){
		  
		  	ShapePolyLine p1 = floor1_zone[j];
		  	if(p1.contains(target_X, target_Y)){
		  		z.zone = p1;
		  		}
		}
	}
	if(z.floor ==2){
		for (int j = 0; j<floor2_zone.length;j++){
		  
		  	ShapePolyLine p1 = floor2_zone[j];
		  	if(p1.contains(target_X, target_Y)){
		  		z.zone = p1;
		  		}
		}
	}
	
	if(z.floor ==0){
	//This is becoz going outside requires travelling to zone 1 floor 1
		z.zone =  floor1_zone[1];//z.shape_line; 
		
	}
	//System.out.println(z.officeName + (int)z.floor);
	//System.out.println(z.zone.getName());
}
//System.out.println(offices.size());
movesCounter = new int [offices.size()][offices.size()];




// create user agents
for ( Office z : offices ){
	for ( int c = 0; c < z.officeSize; c++ ) {
		// create a new user agent
		User p = add_users();
		p.ownOffice = z;
		
		int t = uniform_discr(1, 10);
		if (t == 1) {
		    p.stereotype1 = 1;
		    //System.out.println(c + " " + p.stereotype1 + " " + p.ownOffice);
		}
		if (t > 1 && t <= 4) {
		    p.stereotype1 = 2;
		    //System.out.println(c+ " " + p.stereotype1 + " " + p.ownOffice);
		}
		if (t > 4 && t <= 10) {
		    p.stereotype1 = 3;
		    //System.out.println(c+ " " + p.stereotype1 + " " + p.ownOffice);
		}
		
		
	}
}


// create lights
for ( Office z : offices ) {
	for ( int c = 0; c < z.numberOfLights; c++ ) {
		// create a new light
		Light lgt = add_lights();
		lgt.office = z;
		//lgt.currentOffice = z;
		lgt.moveToANewOffice( z );
	}
}

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[Office]]></ReturnType>
					<Id>1518628291667</Id>
					<Name><![CDATA[findOffice]]></Name>
					<X>790</X><Y>640</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_officeName]]></Name>
						<Type><![CDATA[String]]></Type>
					</Parameter>
					<Body><![CDATA[for (Office z : offices){
    if (z.officeName == target_officeName){
        return z;
    }
}

return null;
    ]]></Body>
				</Function>
			</Functions>
			<AnalysisData>
    			<DataSet>
					<Id>1518628291681</Id>
					<Name><![CDATA[dailyEnergyConsumption]]></Name>
					<X>500</X><Y>870</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1513411200000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[60]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>false</FreezeXAxis>
					<HorizontalAxisExpression><![CDATA[getHourOfDay()]]></HorizontalAxisExpression>
					<VerticalAxisExpression><![CDATA[hourlySchoolEnergyConsumption
      ]]></VerticalAxisExpression>
					<SamplesToKeep>24</SamplesToKeep>
				</DataSet>
    			<DataSet>
					<Id>1521468342141</Id>
					<Name><![CDATA[dailyEnergyConsumption2]]></Name>
					<X>500</X><Y>900</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1521532800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>false</FreezeXAxis>
					<HorizontalAxisExpression><![CDATA[getHourOfDay()]]></HorizontalAxisExpression>
					<VerticalAxisExpression><![CDATA[hourlySchoolEnergyConsumption2]]></VerticalAxisExpression>
					<SamplesToKeep>24</SamplesToKeep>
				</DataSet>
    			<DataSet>
					<Id>1521647527726</Id>
					<Name><![CDATA[dailyEnergyConsumption3]]></Name>
					<X>500</X><Y>930</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<AutoUpdate>false</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1521705600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<FreezeXAxis>false</FreezeXAxis>
					<HorizontalAxisExpression><![CDATA[getHourOfDay()]]></HorizontalAxisExpression>
					<VerticalAxisExpression><![CDATA[hourlySchoolEnergyConsumption3
]]></VerticalAxisExpression>
					<SamplesToKeep>24</SamplesToKeep>
				</DataSet>
			</AnalysisData>
			<Connectivity>
				<ExcelFile>
					<Id>1521726912074</Id>
					<Name><![CDATA[excelFile]]></Name>
					<X>820</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[EnergyMain2018.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
				<ExcelFile>
					<Id>1527091888061</Id>
					<Name><![CDATA[excelFile1]]></Name>
					<X>730</X><Y>960</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ResourceReference>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[RandomRouteChoiceParameterVariation.xlsx]]></ClassName>
					</ResourceReference>
					<SaveInSnapshot>false</SaveInSnapshot>
					<LoadOnStartup>true</LoadOnStartup>
					<SaveOnDispose>false</SaveOnDispose>
				</ExcelFile>
			</Connectivity>
			<AgentLinks>
				<AgentLink>
					<Id>1517934684257</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<EmbeddedObjects>
				<EmbeddedObject>
					<Id>0</Id>
					<Name><![CDATA[offices]]></Name>
					<X>530</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[Office]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
							<ClassName><![CDATA[Office]]></ClassName>
							<ItemName><![CDATA[1518188257793]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>0</Id>
					<Name><![CDATA[users]]></Name>
					<X>430</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1518189428703</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[User]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
							<ClassName><![CDATA[User]]></ClassName>
							<ItemName><![CDATA[1518189428687]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
						<Parameter>
							<Name><![CDATA[velocity]]></Name>
							<Value Class="CodeValue">
								<Code><![CDATA[20]]></Code>
							</Value>
						</Parameter>
						<Parameter>
							<Name><![CDATA[stereotype1]]></Name>
						</Parameter>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
				<EmbeddedObject>
					<Id>0</Id>
					<Name><![CDATA[lights]]></Name>
					<X>650</X><Y>1020</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<PresentationId>1518644839701</PresentationId>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[Light]]></ClassName>
					</ActiveObjectClass>
					<GenericParameterSubstitute>
						<GenericParameterSubstituteReference>
							<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
							<ClassName><![CDATA[Light]]></ClassName>
							<ItemName><![CDATA[1518190574233]]></ItemName>
						</GenericParameterSubstituteReference>
					</GenericParameterSubstitute>
					<Parameters>
					</Parameters>
					<ReplicationFlag>true</ReplicationFlag>
					<Replication Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</Replication>
					<CollectionType>ARRAY_LIST_BASED</CollectionType>
					<InEnvironment>true</InEnvironment>	
					<InitialLocationType>AT_ANIMATION_POSITION</InitialLocationType>
					<XCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</XCode>
					<YCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</YCode>
					<ZCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ZCode>
					<ColumnCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</ColumnCode>
					<RowCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</RowCode>
					<LatitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LatitudeCode>
					<LongitudeCode Class="CodeValue">
						<Code><![CDATA[0]]></Code>
					</LongitudeCode>
					<LocationNameCode Class="CodeValue">
						<Code><![CDATA[""]]></Code>
					</LocationNameCode>
					<InitializationType>EMPTY</InitializationType>
					<InitializationDatabaseTableQuery>
						<TableReference>
						</TableReference>
					</InitializationDatabaseTableQuery>
					<InitializationDatabaseType>ONE_AGENT_PER_DATABASE_RECORD</InitializationDatabaseType>
					<QuantityColumn>
					</QuantityColumn>
				</EmbeddedObject>
			</EmbeddedObjects>

			<Presentation>
				<Level>
					<Id>1679324068741</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<EmbeddedObjectPresentation>
					<Id>1518189428703</Id>
					<Name><![CDATA[users_presentation]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>POSITION_WITH_OFFSET</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>0.0</Latitude>
					<Longitude>0.0</Longitude>
				</EmbeddedObjectPresentation>
				<Text>
					<Id>1518191507782</Id>
					<Name><![CDATA[text]]></Name>
					<X>780</X><Y>390</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Date]]></Text>
					<TextCode><![CDATA["Date: " + format(date())]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>1</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Image>
					<Id>1518630141125</Id>
					<Name><![CDATA[image]]></Name>
					<X>50</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>-5</Z>
					<Width>700</Width>
					<Height>820</Height>
					<Rotation>0.0</Rotation>
					<OriginalSize>false</OriginalSize>
				</Image>
				<EmbeddedObjectPresentation>
					<Id>1518644839701</Id>
					<Name><![CDATA[lights_presentation]]></Name>
					<X>20</X><Y>-20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<DrawingMode>AGENT_CURRENT_POSITION</DrawingMode>
					<ScaleType>AUTOMATICALLY_CALCULATED</ScaleType>
					<GISScaleForRealEmbeddedObjectPresentationSize>1000</GISScaleForRealEmbeddedObjectPresentationSize>
					<GISScaleForFixedEmbeddedObjectPresentationSize>1000000000</GISScaleForFixedEmbeddedObjectPresentationSize>
					<Latitude>0.0</Latitude>
					<Longitude>0.0</Longitude>
				</EmbeddedObjectPresentation>
				<Polyline>
					<Id>1520007577892</Id>
					<Name><![CDATA[A1]]></Name>
					<X>50</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>130</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>130</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007594459</Id>
					<Name><![CDATA[A12]]></Name>
					<X>50</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007630083</Id>
					<Name><![CDATA[A2]]></Name>
					<X>210</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007644691</Id>
					<Name><![CDATA[A3]]></Name>
					<X>270</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007659692</Id>
					<Name><![CDATA[A4]]></Name>
					<X>350</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007677299</Id>
					<Name><![CDATA[A5]]></Name>
					<X>430</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007689907</Id>
					<Name><![CDATA[A6]]></Name>
					<X>510</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>90</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>90</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007714422</Id>
					<Name><![CDATA[A7]]></Name>
					<X>600</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007746723</Id>
					<Name><![CDATA[S3]]></Name>
					<X>720.453</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>19.623</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>-68.679</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>-80.453</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007783155</Id>
					<Name><![CDATA[A8]]></Name>
					<X>590</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007802251</Id>
					<Name><![CDATA[A9]]></Name>
					<X>540</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007813548</Id>
					<Name><![CDATA[A10]]></Name>
					<X>450</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>100</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>90</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007895651</Id>
					<Name><![CDATA[C1]]></Name>
					<X>180</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>30</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>170</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>170</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>70</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>180</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>190</X><Y>240</Y><Z>0</Z></Point>
					   <Point><X>70</X><Y>260</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>320</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>310</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>350</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>370</Y><Z>0</Z></Point>
					   <Point><X>-10</X><Y>250</Y><Z>0</Z></Point>
					   <Point><X>-10</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007929891</Id>
					<Name><![CDATA[C2]]></Name>
					<X>350</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>210</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>210</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007942499</Id>
					<Name><![CDATA[C3]]></Name>
					<X>560</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>40</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>40</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007955171</Id>
					<Name><![CDATA[C4]]></Name>
					<X>360</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>280</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>280</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520007987312</Id>
					<Name><![CDATA[S1]]></Name>
					<X>330</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>-80</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>-70</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>-30</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>-20</X><Y>100</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008023908</Id>
					<Name><![CDATA[A11]]></Name>
					<X>450</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>-80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>-60</X><Y>100</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>-80</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008064208</Id>
					<Name><![CDATA[S2]]></Name>
					<X>50</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008076879</Id>
					<Name><![CDATA[A13]]></Name>
					<X>240</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008086990</Id>
					<Name><![CDATA[A14]]></Name>
					<X>320</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>240</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>240</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008347590</Id>
					<Name><![CDATA[B1]]></Name>
					<X>50</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>100</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>100</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008368085</Id>
					<Name><![CDATA[B2]]></Name>
					<X>130</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008376453</Id>
					<Name><![CDATA[B3]]></Name>
					<X>180</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008385781</Id>
					<Name><![CDATA[B4]]></Name>
					<X>230</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008394725</Id>
					<Name><![CDATA[B5]]></Name>
					<X>310</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008405221</Id>
					<Name><![CDATA[B6]]></Name>
					<X>390</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008417781</Id>
					<Name><![CDATA[B7]]></Name>
					<X>470</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>70</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>70</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008427285</Id>
					<Name><![CDATA[B8]]></Name>
					<X>540</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008436309</Id>
					<Name><![CDATA[B9]]></Name>
					<X>600</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008450157</Id>
					<Name><![CDATA[B10]]></Name>
					<X>650</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008458277</Id>
					<Name><![CDATA[B11]]></Name>
					<X>650</X><Y>490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008472855</Id>
					<Name><![CDATA[B12]]></Name>
					<X>650</X><Y>550</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008537269</Id>
					<Name><![CDATA[polyline34]]></Name>
					<X>650</X><Y>610</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>100</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>10</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>-10</X><Y>20</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008551621</Id>
					<Name><![CDATA[B13]]></Name>
					<X>640</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>-80</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>-100</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008582373</Id>
					<Name><![CDATA[B14]]></Name>
					<X>540</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>-150</X><Y>140</Y><Z>0</Z></Point>
					   <Point><X>-180</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008608693</Id>
					<Name><![CDATA[B17]]></Name>
					<X>50</X><Y>500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008615125</Id>
					<Name><![CDATA[B16]]></Name>
					<X>50</X><Y>550</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>50</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008621813</Id>
					<Name><![CDATA[B15]]></Name>
					<X>50</X><Y>600</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>30</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008633093</Id>
					<Name><![CDATA[polyline40]]></Name>
					<X>50</X><Y>630</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>110</X><Y>60</Y><Z>0</Z></Point>
					   <Point><X>110</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520008649717</Id>
					<Name><![CDATA[B18]]></Name>
					<X>130</X><Y>470</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>520</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>520</X><Y>140</Y><Z>0</Z></Point>
					   <Point><X>510</X><Y>160</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>160</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Text>
					<Id>1520008851287</Id>
					<Name><![CDATA[text1]]></Name>
					<X>770</X><Y>150</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Floor - A ]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520008885885</Id>
					<Name><![CDATA[text2]]></Name>
					<X>770</X><Y>480</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Floor - B]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011473193</Id>
					<Name><![CDATA[text3]]></Name>
					<X>90</X><Y>100</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011541935</Id>
					<Name><![CDATA[text4]]></Name>
					<X>240</X><Y>70</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011555443</Id>
					<Name><![CDATA[text5]]></Name>
					<X>310</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A3]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011564351</Id>
					<Name><![CDATA[text6]]></Name>
					<X>380</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A4]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011567720</Id>
					<Name><![CDATA[text7]]></Name>
					<X>460</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A5]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011570902</Id>
					<Name><![CDATA[text8]]></Name>
					<X>550</X><Y>60</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A6]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011589372</Id>
					<Name><![CDATA[text9]]></Name>
					<X>660</X><Y>130</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A7]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011596454</Id>
					<Name><![CDATA[text10]]></Name>
					<X>620</X><Y>280</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A8]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011602210</Id>
					<Name><![CDATA[text11]]></Name>
					<X>560</X><Y>280</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A9]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011605704</Id>
					<Name><![CDATA[text12]]></Name>
					<X>500</X><Y>300</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A10]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011609058</Id>
					<Name><![CDATA[text13]]></Name>
					<X>410</X><Y>300</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A11]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011612567</Id>
					<Name><![CDATA[text14]]></Name>
					<X>110</X><Y>180</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A12]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011618277</Id>
					<Name><![CDATA[text15]]></Name>
					<X>110</X><Y>240</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[S2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011628416</Id>
					<Name><![CDATA[text16]]></Name>
					<X>390</X><Y>170</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A14]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011637277</Id>
					<Name><![CDATA[text17]]></Name>
					<X>270</X><Y>170</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[A13]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011650333</Id>
					<Name><![CDATA[text18]]></Name>
					<X>210</X><Y>250</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[C1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011654701</Id>
					<Name><![CDATA[text19]]></Name>
					<X>440</X><Y>120</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[C2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011658788</Id>
					<Name><![CDATA[text20]]></Name>
					<X>580</X><Y>150</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[C3]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011662080</Id>
					<Name><![CDATA[text21]]></Name>
					<X>470</X><Y>230</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[C4]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011673873</Id>
					<Name><![CDATA[text22]]></Name>
					<X>280</X><Y>310</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[S1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011702295</Id>
					<Name><![CDATA[text23]]></Name>
					<X>680</X><Y>260</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[S3]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011710906</Id>
					<Name><![CDATA[text24]]></Name>
					<X>70</X><Y>440</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B1]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011714150</Id>
					<Name><![CDATA[text25]]></Name>
					<X>150</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B2]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011717379</Id>
					<Name><![CDATA[text26]]></Name>
					<X>200</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B3]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011725086</Id>
					<Name><![CDATA[text27]]></Name>
					<X>260</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B4]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011727940</Id>
					<Name><![CDATA[text28]]></Name>
					<X>340</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B5]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011731045</Id>
					<Name><![CDATA[text29]]></Name>
					<X>420</X><Y>440</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B6]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011734726</Id>
					<Name><![CDATA[text30]]></Name>
					<X>500</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B7]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011738610</Id>
					<Name><![CDATA[text31]]></Name>
					<X>560</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B8]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011742198</Id>
					<Name><![CDATA[text32]]></Name>
					<X>610</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B9]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011745817</Id>
					<Name><![CDATA[text33]]></Name>
					<X>680</X><Y>440</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B10]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011753804</Id>
					<Name><![CDATA[text34]]></Name>
					<X>680</X><Y>520</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B11]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011758172</Id>
					<Name><![CDATA[text35]]></Name>
					<X>680</X><Y>570</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B12]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011761651</Id>
					<Name><![CDATA[text36]]></Name>
					<X>590</X><Y>680</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B13]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011769450</Id>
					<Name><![CDATA[text37]]></Name>
					<X>460</X><Y>690</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B14]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011773069</Id>
					<Name><![CDATA[text38]]></Name>
					<X>90</X><Y>610</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B15]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011778950</Id>
					<Name><![CDATA[text39]]></Name>
					<X>80</X><Y>570</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B16]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011787015</Id>
					<Name><![CDATA[text40]]></Name>
					<X>80</X><Y>520</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B17]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1520011791102</Id>
					<Name><![CDATA[text41]]></Name>
					<X>370</X><Y>550</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[B18]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>10</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Polyline>
					<Id>1520014851944</Id>
					<Name><![CDATA[OOB]]></Name>
					<X>50</X><Y>770</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>700</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>700</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>70</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Text>
					<Id>1520014856267</Id>
					<Name><![CDATA[text42]]></Name>
					<X>370</X><Y>810</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[OutOfBuilding]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Polyline>
					<Id>1520957052623</Id>
					<Name><![CDATA[zone1F2]]></Name>
					<X>50</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>260</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>160</X><Y>290</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>290</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957134462</Id>
					<Name><![CDATA[zone2F2]]></Name>
					<X>310</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>230</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>230</X><Y>230</Y><Z>0</Z></Point>
					   <Point><X>250</X><Y>340</Y><Z>0</Z></Point>
					   <Point><X>80</X><Y>370</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>230</Y><Z>0</Z></Point>
					   <Point><X>-80</X><Y>230</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957183226</Id>
					<Name><![CDATA[zone3F2]]></Name>
					<X>540</X><Y>400</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>190</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>210</X><Y>300</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>320</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>340</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>230</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957270614</Id>
					<Name><![CDATA[zone1F1]]></Name>
					<X>50</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>300</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>300</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>270</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>270</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>310</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>340</X><Y>340</Y><Z>0</Z></Point>
					   <Point><X>130</X><Y>370</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>370</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957308086</Id>
					<Name><![CDATA[zone2F1]]></Name>
					<X>350</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>250</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>250</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>210</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>210</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>120</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957390814</Id>
					<Name><![CDATA[zone4F1]]></Name>
					<X>600</X><Y>20</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>120</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>140</X><Y>280</Y><Z>0</Z></Point>
					   <Point><X>50</X><Y>290</Y><Z>0</Z></Point>
					   <Point><X>40</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>-40</X><Y>200</Y><Z>0</Z></Point>
					   <Point><X>-40</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Polyline>
					<Id>1520957531998</Id>
					<Name><![CDATA[zone3F1]]></Name>
					<X>320</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>false</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>240</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>240</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>320</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>320</X><Y>110</Y><Z>0</Z></Point>
					   <Point><X>330</X><Y>170</Y><Z>0</Z></Point>
					   <Point><X>70</X><Y>220</Y><Z>0</Z></Point>
					   <Point><X>40</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>80</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Text>
					<Id>1521639980826</Id>
					<Name><![CDATA[text43]]></Name>
					<X>1040</X><Y>220</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>270.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Total Power consumed (W)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1521640037866</Id>
					<Name><![CDATA[text44]]></Name>
					<X>1560</X><Y>220</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Time / minutes]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1521640086217</Id>
					<Name><![CDATA[text45]]></Name>
					<X>1030</X><Y>820</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>270.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Total Energy consumed per hour (KWh)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1521640123124</Id>
					<Name><![CDATA[text46]]></Name>
					<X>1540</X><Y>780</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Time / Hour]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1521738088963</Id>
					<Name><![CDATA[text49]]></Name>
					<X>1040</X><Y>470</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>270.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Total Power consumed (W)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1521738100619</Id>
					<Name><![CDATA[text50]]></Name>
					<X>1560</X><Y>480</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Time / minutes]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1522071031922</Id>
					<Name><![CDATA[text51]]></Name>
					<X>1150</X><Y>820</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewMain.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[back to Main view]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1522071319673</Id>
					<Name><![CDATA[text52]]></Name>
					<X>780</X><Y>430</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewPlot.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Click for Plot view]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1522071595037</Id>
					<Name><![CDATA[text53]]></Name>
					<X>110</X><Y>860</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewMain.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Back to Main view]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1522071654013</Id>
					<Name><![CDATA[text54]]></Name>
					<X>770</X><Y>510</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewData.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Click for Data view]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1522071980564</Id>
					<Name><![CDATA[text55]]></Name>
					<X>780</X><Y>540</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<OnClickCode><![CDATA[viewMain.navigateTo();]]></OnClickCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Main view]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>18</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Polyline>
					<Id>1530799634536</Id>
					<Name><![CDATA[A15]]></Name>
					<X>330</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor/>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>40</X><Y>-10</Y><Z>0</Z></Point>
					   <Point><X>60</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>20</X><Y>90</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					</Points>
					<Closed>false</Closed>
				</Polyline>
				<Text>
					<Id>1566333294774</Id>
					<Name><![CDATA[text57]]></Name>
					<X>1030</X><Y>1210</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>270.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[No. of Occupant]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>1566333319144</Id>
					<Name><![CDATA[text47]]></Name>
					<X>1030</X><Y>1020</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>270.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Percentage Diff (W)]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>14</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
    			<Plot>
					<Id>1519143962303</Id>
					<Name><![CDATA[plot]]></Name>
					<X>1080</X><Y>550</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1519200000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[60]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>500</Width>
					<Height>270</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>50</XOffset>
						<YOffset>30</YOffset>
						<Width>420</Width>
						<Height>140</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>70</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<VerScaleFromExpression><![CDATA[0]]></VerScaleFromExpression>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<DrawLine>true</DrawLine>
					<Interpolation>LINEAR</Interpolation>
					<DatasetExpression>  
						<Title><![CDATA[NGB Simulated Energy Conusmption (Intra Day)]]></Title>
					<Expression><![CDATA[dailyEnergyConsumption]]></Expression>
					<Color>-65536</Color>
					<Expression2><![CDATA[0]]></Expression2>
					<Expression2Flag>false</Expression2Flag>
						<PointStyle>CIRCLE</PointStyle>
						<LineWidth>1.0</LineWidth>
						<HorizontalAxisExpression><![CDATA[0]]></HorizontalAxisExpression>
					</DatasetExpression>
					<DatasetExpression>  
						<Title><![CDATA[Estates NGB Consumption]]></Title>
					<Expression><![CDATA[dailyEnergyConsumption3]]></Expression>
					<Color>-13447886</Color>
					<Expression2><![CDATA[0]]></Expression2>
					<Expression2Flag>false</Expression2Flag>
						<PointStyle>CIRCLE</PointStyle>
						<LineWidth>1.0</LineWidth>
						<HorizontalAxisExpression><![CDATA[0]]></HorizontalAxisExpression>
					</DatasetExpression>
					<SamplesToKeep>24</SamplesToKeep>
					<HorScaleFromExpression><![CDATA[0]]></HorScaleFromExpression>
					<HorScaleToExpression><![CDATA[1]]></HorScaleToExpression>
					<HorScaleType>AUTO</HorScaleType>
    			</Plot>
    			<TimeStackChart>
					<Id>1519144264441</Id>
					<Name><![CDATA[SchoolEnergyConsumption]]></Name>
					<X>1080</X><Y>20</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1519200000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[30]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>510</Width>
					<Height>240</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>40</XOffset>
						<YOffset>30</YOffset>
						<Width>440</Width>
						<Height>130</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>50</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<TimeWindowsMovementType>MOVEMENT_WITH_DATA</TimeWindowsMovementType>		
					<TimeWindowUnits>MODEL_TIME_UNIT</TimeWindowUnits>
					<TimeWindowExpression><![CDATA[2880//15000]]></TimeWindowExpression>
					<DatasetExpression>
					<Expression><![CDATA[my_dataset]]></Expression>
					<Color>-16776961</Color>
					<Expression2><![CDATA[hourlySchoolPowerConsumption2]]></Expression2>
					<Expression2Flag>true</Expression2Flag>  
							<Title><![CDATA[NGB Simulated Power Consumption]]></Title>
					</DatasetExpression>
					<SamplesToKeep>2880</SamplesToKeep>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<LabelFormat>MODEL_TIME_UNITS</LabelFormat>
    			</TimeStackChart>
    			<TimeStackChart>
					<Id>1521736989787</Id>
					<Name><![CDATA[SchoolEnergyConsumptionEstates]]></Name>
					<X>1070</X><Y>270</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1521792000000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[30]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>520</Width>
					<Height>220</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>50</XOffset>
						<YOffset>30</YOffset>
						<Width>440</Width>
						<Height>130</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>30</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<TimeWindowsMovementType>MOVEMENT_WITH_TIME</TimeWindowsMovementType>		
					<TimeWindowUnits>MODEL_TIME_UNIT</TimeWindowUnits>
					<TimeWindowExpression><![CDATA[2880//15000]]></TimeWindowExpression>
					<DatasetExpression>
					<Expression><![CDATA[my_dataset]]></Expression>
					<Color>-2354116</Color>
					<Expression2><![CDATA[hourlySchoolPowerConsumption]]></Expression2>
					<Expression2Flag>true</Expression2Flag>  
							<Title><![CDATA[NGB Estates Power Consumption]]></Title>
					</DatasetExpression>
					<SamplesToKeep>2880</SamplesToKeep>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<LabelFormat>MODEL_TIME_UNITS</LabelFormat>
    			</TimeStackChart>
    			<TimeStackChart>
					<Id>1566333154077</Id>
					<Name><![CDATA[chart]]></Name>
					<X>1070</X><Y>1050</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1531468800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[30]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>500</Width>
					<Height>250</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>50</XOffset>
						<YOffset>30</YOffset>
						<Width>420</Width>
						<Height>160</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>30</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<TimeWindowsMovementType>MOVEMENT_WITH_TIME</TimeWindowsMovementType>		
					<TimeWindowUnits>MODEL_TIME_UNIT</TimeWindowUnits>
					<TimeWindowExpression><![CDATA[3000]]></TimeWindowExpression>
					<DatasetExpression>
					<Expression><![CDATA[my_dataset]]></Expression>
					<Color>-8097537</Color>
					<Expression2><![CDATA[0]]></Expression2>
					<Expression2Flag>true</Expression2Flag>  
							<Title><![CDATA[Occupancy Chart]]></Title>
					</DatasetExpression>
					<SamplesToKeep>3000</SamplesToKeep>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<LabelFormat>MODEL_TIME_UNITS</LabelFormat>
    			</TimeStackChart>
    			<TimeStackChart>
					<Id>1566333220236</Id>
					<Name><![CDATA[EnergyDifference]]></Name>
					<X>1080</X><Y>850</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<AutoUpdate>true</AutoUpdate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1521532800000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[30]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Width>490</Width>
					<Height>200</Height>
					<BackgroundColor/>
					<BorderColor/>
					<ChartArea>
						<XOffset>50</XOffset>
						<YOffset>30</YOffset>
						<Width>410</Width>
						<Height>120</Height>
						<BackgroundColor>-1</BackgroundColor>
						<BorderColor>-16777216</BorderColor>
						<GridColor>-12566464</GridColor>
					</ChartArea>
					<Legend>
						<Place>SOUTH</Place>
						<TextColor>-16777216</TextColor>
						<Size>20</Size>
					</Legend>
					<Labels>
						<HorLabelsPosition>DEFAULT</HorLabelsPosition>
						<VerLabelsPosition>DEFAULT</VerLabelsPosition>
						<TextColor>-12566464</TextColor>
					</Labels>
					<ShowLegend>true</ShowLegend>
					<TimeWindowsMovementType>MOVEMENT_WITH_TIME</TimeWindowsMovementType>		
					<TimeWindowUnits>MODEL_TIME_UNIT</TimeWindowUnits>
					<TimeWindowExpression><![CDATA[2880]]></TimeWindowExpression>
					<DatasetExpression>
					<Expression><![CDATA[my_dataset]]></Expression>
					<Color>-4565549</Color>
					<Expression2><![CDATA[0]]></Expression2>
					<Expression2Flag>true</Expression2Flag>  
							<Title><![CDATA[Percentage of additional Electricty consumed]]></Title>
					</DatasetExpression>
					<SamplesToKeep>2880</SamplesToKeep>
					<VerScaleToExpression><![CDATA[1]]></VerScaleToExpression>
					<VerScaleType>AUTO</VerScaleType>
					<LabelFormat>MODEL_TIME_UNITS</LabelFormat>
    			</TimeStackChart>
			</Presentation>

				</Level>
			</Presentation>
			<Areas>
				<Area>
					<Id>1522070992444</Id>
					<Name><![CDATA[viewPlot]]></Name>
					<X>990</X><Y>10</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>1080</Width>
					<Height>1350</Height>
				</Area>
				<Area>
					<Id>1522071364182</Id>
					<Name><![CDATA[viewMain]]></Name>
					<X>-40</X><Y>-100</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>2580</Width>
					<Height>1670</Height>
				</Area>
				<Area>
					<Id>1522071524697</Id>
					<Name><![CDATA[viewData]]></Name>
					<X>80</X><Y>840</Y>
					<Label><X>0</X><Y>-10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Title><![CDATA[]]></Title>
					<Width>900</Width>
					<Height>520</Height>
				</Area>
			</Areas>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1518188257794</Id>
			<Name><![CDATA[Office]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1518188257793</Id>
				<Name><![CDATA[1518188257793]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10 / getScale().pixelsPerUnit(METER) / 60]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1518249600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1518188257791</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1679324068742</CurrentLevel>
			<ConnectionsId>1518188257790</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1518194619572</Id>
					<Name><![CDATA[officeName]]></Name>
					<X>110</X><Y>50</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[String]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194629867</Id>
					<Name><![CDATA[officeSize]]></Name>
					<X>110</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194642315</Id>
					<Name><![CDATA[numberOfComputers]]></Name>
					<X>110</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194679503</Id>
					<Name><![CDATA[numberOfLights]]></Name>
					<X>110</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194695913</Id>
					<Name><![CDATA[timeOfficeUnoccupied]]></Name>
					<X>110</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194710794</Id>
					<Name><![CDATA[energyConsumption]]></Name>
					<X>110</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518194735035</Id>
					<Name><![CDATA[shape_line]]></Name>
					<Description><![CDATA[references corresponding polyline shape]]></Description>
					<X>110</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[ShapePolyLine]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[null]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520350110956</Id>
					<Name><![CDATA[floor]]></Name>
					<X>110</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520961163869</Id>
					<Name><![CDATA[zone]]></Name>
					<Description><![CDATA[references corresponding polyline shape]]></Description>
					<X>110</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[ShapePolyLine]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1518195587289</Id>
					<Name><![CDATA[users]]></Name>
					<X>330</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[java.util.Vector]]></CollectionClass>
						<ElementClass><![CDATA[User]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
				<Variable Class="CollectionVariable">
					<Id>1518195664087</Id>
					<Name><![CDATA[lights]]></Name>
					<X>330</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" AccessType="public" StaticVariable="false">
						<CollectionClass><![CDATA[java.util.Vector]]></CollectionClass>
						<ElementClass><![CDATA[Light]]></ElementClass>
						<ValueElementClass><![CDATA[String]]></ValueElementClass>
					</Properties>

				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518196128994</Id>
					<Name><![CDATA[vacant]]></Name>
					<X>610</X><Y>160</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518196147746</Id>
					<Name><![CDATA[partlyInUse]]></Name>
					<X>600</X><Y>240</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518196187010</Id>
					<Name><![CDATA[fullyInUse]]></Name>
					<X>630</X><Y>330</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1518196126171</Id>
					<Name><![CDATA[statechart]]></Name>
					<X>650</X><Y>120</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<Properties Target="1518196128994">
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518196140523</Id>
					<Name><![CDATA[transition]]></Name>
					<X>700</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-30</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518196128994" Target="1518196147746" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[energyConsumption > 0 ]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518196167947</Id>
					<Name><![CDATA[transition1]]></Name>
					<X>660</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>30</X><Y>60</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518196147746" Target="1518196187010" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[energyConsumption >= numberOfLights*60 









]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518196201581</Id>
					<Name><![CDATA[transition2]]></Name>
					<X>670</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-30</X><Y>-60</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518196187010" Target="1518196147746" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[energyConsumption <= 2*(numberOfLights*60)/3













]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518196248053</Id>
					<Name><![CDATA[transition3]]></Name>
					<X>640</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>30</X><Y>-50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518196147746" Target="1518196128994" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[energyConsumption == 0]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Events>
				<Event>
					<Id>1518195817075</Id>
					<Name><![CDATA[SwitchOffLights]]></Name>
					<X>330</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1518249600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[/*if (timeOfficeUnoccupied + get_Main().automaticSwitchOffTime == get_Main().simulationTime && users.isEmpty() == true ) {
    for (Light lgt : lights) {
         lgt.lightOn = false;
         lgt.trajectLightOn = false;
    }
}
*/
if ((int)getHourOfDay() >= 20 || (int)getHourOfDay() <= 6) {
    for (Light lgt : lights) {
         lgt.lightOn = false;
         lgt.trajectLightOn = false;
    }
    
Office z;
z = get_Main().findOffice("S1");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("S2");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("S3");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("B18");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("B14");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C1");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
	
z = get_Main().findOffice("C2");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C3");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C4");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
	
	z = get_Main().findOffice("B15");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}     
	
}

if( ((int)getDayOfWeek()>1 && (int)getDayOfWeek()<7) ){

if ((int)getHourOfDay() >= 6 && (int)getHourOfDay() <= 20) {
    /*for (Light lgt : lights) {
         lgt.lightOn = true;
         lgt.trajectLightOn = true;
    }*/
    
    Office z;
z = get_Main().findOffice("A13");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
	
z = get_Main().findOffice("B13");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}	

z = get_Main().findOffice("B15");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}  
	
	
	z = get_Main().findOffice("C1");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
	
z = get_Main().findOffice("C2");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C3");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C4");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}  
/*z = get_Main().findOffice("C2");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C3");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}
z = get_Main().findOffice("C4");

	for (Light lgt : z.lights) {
		lgt.trajectLightOn = true;
		lgt.lightOn = true;
	}  */
   
}

}
]]></Action>
				</Event>
				<Event>
					<Id>1518195865966</Id>
					<Name><![CDATA[calculateEnergyConsumption]]></Name>
					<X>330</X><Y>220</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1518249600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[double energyConsumptionLights = 0;

for (Light lgt : lights) {
     energyConsumptionLights = energyConsumptionLights + lgt.power;
     }
energyConsumption = energyConsumptionLights;
]]></Action>
				</Event>
				<Event>
					<Id>1518195922110</Id>
					<Name><![CDATA[animation]]></Name>
					<X>330</X><Y>250</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="occuresOnce">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1518249600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[/*int k = 225 - (int) floor(225 * energyConsumption / (numberOfLights*60+numberOfComputers*90));
if (get_Main().radio1.getValue()==0){
   shape_line.setFillColor(null);
   }
else {
    if (statechart.isStateActive(vacant)){
    shape_line.setFillColor(null);
    }
    if (statechart.isStateActive(partlyInUse)){
    shape_line.setFillColor(new Color(0, k, 0));
    }
    if (statechart.isStateActive(fullyInUse)){
    shape_line.setFillColor(new Color(225, 0, 0));
    }
   }*/]]></Action>
				</Event>
				<Event>
					<Id>1530010502990</Id>
					<Name><![CDATA[event]]></Name>
					<X>330</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="occuresOnce">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1530086400000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1518195980359</Id>
					<Name><![CDATA[joinOffice]]></Name>
					<X>520</X><Y>60</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[o]]></Name>
						<Type><![CDATA[Object]]></Type>
					</Parameter>
					<Body><![CDATA[// join an office
if ( o instanceof User ) {
	users.add( (User)o );
}
if ( o instanceof Light ) {
	lights.add( (Light)o ); 
}]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1518195987581</Id>
					<Name><![CDATA[leaveOffice]]></Name>
					<X>520</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[o]]></Name>
						<Type><![CDATA[Object]]></Type>
					</Parameter>
					<Body><![CDATA[// exclude a user, computer, or light from an office
if ( o instanceof User ) {
	users.remove( o );	
}
if ( o instanceof Light ) {
	lights.remove( o );
}
]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1518188257790</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1518188257836</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1679324068742</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>


				</Level>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1518189428688</Id>
			<Name><![CDATA[User]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1518189428687</Id>
				<Name><![CDATA[1518189428687]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>false</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10 / getScale().pixelsPerUnit(METER) / 60]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1518249600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1518189428685</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1679324068743</CurrentLevel>
			<ConnectionsId>1518189428684</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1518452728483</Id>
					<Name><![CDATA[ownOffice]]></Name>
					<X>80</X><Y>230</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Office]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728485</Id>
					<Name><![CDATA[jobType]]></Name>
					<X>80</X><Y>260</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728487</Id>
					<Name><![CDATA[energySavingAwareness]]></Name>
					<X>80</X><Y>290</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728489</Id>
					<Name><![CDATA[currentOffice]]></Name>
					<X>80</X><Y>320</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Office]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728491</Id>
					<Name><![CDATA[time]]></Name>
					<X>80</X><Y>380</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728499</Id>
					<Name><![CDATA[day]]></Name>
					<X>80</X><Y>410</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728501</Id>
					<Name><![CDATA[otherRoom]]></Name>
					<X>80</X><Y>350</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Office]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728503</Id>
					<Name><![CDATA[simulationTime]]></Name>
					<X>80</X><Y>440</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728518</Id>
					<Name><![CDATA[arrivalTime]]></Name>
					<X>80</X><Y>500</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518452728520</Id>
					<Name><![CDATA[leaveTime]]></Name>
					<X>80</X><Y>530</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520354889071</Id>
					<Name><![CDATA[breakLoop]]></Name>
					<X>80</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1520896858083</Id>
					<Name><![CDATA[groupProb]]></Name>
					<X>80</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[0.02]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521115961867</Id>
					<Name><![CDATA[trajectoryRooms]]></Name>
					<X>80</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[ArrayList<String>]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[trajectoryRooms = new ArrayList<String>();]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
				<Variable Class="Parameter">
					<Id>1518189428700</Id>
					<Name><![CDATA[velocity]]></Name>
					<X>80</X><Y>90</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[double]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[20]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>0</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
				<Variable Class="Parameter">
					<Id>1518189428701</Id>
					<Name><![CDATA[stereotype1]]></Name>
					<X>80</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" ModificatorType="STATIC">
						<Type><![CDATA[int]]></Type>
						<UnitType><![CDATA[NONE]]></UnitType>
						<SdArray>false</SdArray>
						<DefaultValue Class="CodeValue">
							<Code><![CDATA[0]]></Code>
						</DefaultValue>
						<ParameterEditor>
							<Id>0</Id>
							<EditorContolType>TEXT_BOX</EditorContolType>
							<MinSliderValue><![CDATA[0]]></MinSliderValue>
							<MaxSliderValue><![CDATA[100]]></MaxSliderValue>
							<DelimeterType>NO_DELIMETER</DelimeterType>
						</ParameterEditor>
					</Properties>                 
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518454983867</Id>
					<Name><![CDATA[shortBreakRooms]]></Name>
					<X>180</X><Y>520</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="220" Height="240">
						<EntryAction><![CDATA[otherRoom = selectOtherRoom2();

/*System.out.println("I am in corridor");
moveToANewOffice(selectCorridor());

for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }*/]]></EntryAction>
						<ExitAction><![CDATA[currentOffice.leaveOffice(this);
//System.out.println("User removed");
//automated energy management strategy
if (get_Main().scenario == "automated" ){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       /*for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }*/
   }
}

//staff controlled energy management strategy
/*if (get_Main().scenario == "staff controlled" ){
   if (currentOffice.users.isEmpty() == true) {
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}

//combined energy management strategy
if (get_Main().scenario == "combined"){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}*/]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518454983871</Id>
					<Name><![CDATA[InOtherRooms]]></Name>
					<X>610</X><Y>783</Y>
					<Label><X>99</X><Y>12</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="330" Height="240">
						<EntryAction><![CDATA[otherRoom = selectOtherRoom();

if(otherRoom.officeName=="A1"|| otherRoom.officeName=="A14"||otherRoom.officeName=="A7"||otherRoom.officeName=="A12" ){
	 if(otherRoom.users.size()>6){
	    otherRoom = ownOffice;
	    breakLoop = 1;
	 }
}
//System.out.println("Other Room"+ otherRoom.officeName);




]]></EntryAction>
						<ExitAction><![CDATA[currentOffice.leaveOffice(this);

//automated energy management strategy
if (get_Main().scenario == "automated" ){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       /*for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }*/
   }
}

//staff controlled energy management strategy
/*if (get_Main().scenario == "staff controlled" ){
   if (currentOffice.users.isEmpty() == true) {
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}

//combined energy management strategy
if (get_Main().scenario == "combined"){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}*/



]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="Branch" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983879</Id>
					<Name><![CDATA[branch]]></Name>
					<X>790</X><Y>890</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Properties>	
						<Action><![CDATA[moveToANewOffice(otherRoom);]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="State" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983881</Id>
					<Name><![CDATA[outSide]]></Name>
					<X>640</X><Y>910</Y>
					<Label><X>10</X><Y>20</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="70" Height="50">
						<EntryAction><![CDATA[//moveToANewOffice(selectOtherRoom());
send("outside", ALL);
for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }
     //System.out.println("OB")]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983883</Id>
					<Name><![CDATA[InLab]]></Name>
					<X>750</X><Y>930</Y>
					<Label><X>20</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="80" Height="30">
						<EntryAction><![CDATA[//moveToANewOffice(selectOtherRoom());

for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }
     //System.out.println("IP")]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983885</Id>
					<Name><![CDATA[InSeminar]]></Name>
					<X>850</X><Y>920</Y>
					<Label><X>10</X><Y>20</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="80" Height="40">
						<EntryAction><![CDATA[//moveToANewOffice(selectOtherRoom());
send("seminar", ALL);
for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }
     //System.out.println("B04")]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518454983887</Id>
					<Name><![CDATA[outOfSchool]]></Name>
					<X>450</X><Y>460</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[currentOffice = null;
setArrivalTimeAndLeaveTime();]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518627219171</Id>
					<Name><![CDATA[InOwnOffice]]></Name>
					<X>410</X><Y>790</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[breakLoop=0;
moveToANewOffice(ownOffice);
for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }]]></EntryAction>
						<ExitAction><![CDATA[currentOffice.leaveOffice(this);

//automated energy management strategy
if (get_Main().scenario == "automated" ){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       for (Light lgt : currentOffice.lights) {
               //lgt.lightOn = false;
           }
   }
}

//staff controlled energy management strategy
/*if (get_Main().scenario == "staff controlled" ){
   if (currentOffice.users.isEmpty() == true) {
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}

//combined energy management strategy
if (get_Main().scenario == "combined"){
   if (currentOffice.users.isEmpty() == true) {
       currentOffice.timeOfficeUnoccupied = simulationTime;
       if (energySavingAwareness >= get_Main().threshold){
           for (Light lgt : currentOffice.lights) {
               lgt.lightOn = false;
           }
       }
   }
}*/



]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519737979401</Id>
					<Name><![CDATA[inKitchen]]></Name>
					<X>190</X><Y>590</Y>
					<Label><X>0</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="60" Height="30">
						<EntryAction><![CDATA[for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="Branch" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519737995032</Id>
					<Name><![CDATA[branch1]]></Name>
					<X>290</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Properties>	
						<Action><![CDATA[moveToANewOffice(otherRoom);]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="State" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519738072141</Id>
					<Name><![CDATA[inToilet]]></Name>
					<X>260</X><Y>550</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="60" Height="30">
						<EntryAction><![CDATA[for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519738081017</Id>
					<Name><![CDATA[inPrinting]]></Name>
					<X>330</X><Y>600</Y>
					<Label><X>0</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="60" Height="30">
						<EntryAction><![CDATA[for (Light lgt : currentOffice.lights) {
     lgt.lightOn = true;
     }]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1521130912526</Id>
					<Name><![CDATA[transitEntry]]></Name>
					<X>240</X><Y>710</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="80" Height="30">
						<EntryAction><![CDATA[trajectoryProbabilitySelection(otherRoom);
//trajectoryRandomSelection(otherRoom);]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn off lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;
		}*/
	}				
	//System.out.println("Office name = " + z.officeName);
} 
trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1521208618045</Id>
					<Name><![CDATA[transitEntry2]]></Name>
					<X>740</X><Y>810</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[trajectoryProbabilitySelection(otherRoom);
//trajectoryRandomSelection(otherRoom);]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn on lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;
		}*/
	}					
	//System.out.println("Office name = " + z.officeName);
} 
trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1521212645719</Id>
					<Name><![CDATA[transitReturn]]></Name>
					<X>280</X><Y>790</Y>
					<Label><X>5</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="80" Height="30">
						<EntryAction><![CDATA[trajectoryProbabilitySelection(ownOffice);
//trajectoryRandomSelection(ownOffice);]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn off lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;
		}*/
	}				
	//System.out.println("Office name = " + z.officeName);
} 
trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1521212817711</Id>
					<Name><![CDATA[transitReturn2]]></Name>
					<X>570</X><Y>730</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[trajectoryProbabilitySelection(ownOffice);
//trajectoryRandomSelection(ownOffice);]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn off lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;

		}*/
	}				
	//System.out.println("Office name = " + z.officeName);
} 
trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1521544499003</Id>
					<Name><![CDATA[Entry]]></Name>
					<X>420</X><Y>670</Y>
					<Label><X>10</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="60" Height="30">
						<EntryAction><![CDATA[trajectoryEntrySelection();]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn off lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;

		}*/
	}				
	//System.out.println("Office name = " + z.officeName);
} 

trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1521545118211</Id>
					<Name><![CDATA[Exit]]></Name>
					<X>490</X><Y>670</Y>
					<Label><X>15</X><Y>15</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="60" Height="30">
						<EntryAction><![CDATA[trajectorySelection(get_Main().findOffice("OOB")); 
//this is just to make sure we follow the trajectory near the exit




]]></EntryAction>
						<ExitAction><![CDATA[Office z;
for (String roomName : trajectoryRooms) {
				
	z = get_Main().findOffice(roomName);
	//turn off lights for the rooms on the path
	if(z.users.isEmpty() == true){
		/*for (Light lgt : z.lights) {
			lgt.trajectLightOn = false;
			lgt.lightOn = false;

		}*/
	}				
	//System.out.println("Office name = " + z.officeName);
} 
trajectoryRooms.clear();]]></ExitAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983889</Id>
					<Name><![CDATA[enterOffice]]></Name>
					<X>210</X><Y>760</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
						<Point><X>70</X><Y>50</Y></Point>
					</Points>
					<IconOffset>50.0</IconOffset>
					<Properties Source="1518454983867" Target="1521212645719" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5 + 5*Math.random()]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[satisfies]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983891</Id>
					<Name><![CDATA[leaveOffice]]></Name>
					<X>420</X><Y>820</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
						<Point><X>-160</X><Y>40</Y></Point>
						<Point><X>-160</X><Y>-80</Y></Point>
					</Points>
					<IconOffset>90.0</IconOffset>
					<Properties Source="1518627219171" Target="1521130912526" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[time = uniform_discr()]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[time == (int) uniform_discr(arrivalTime, leaveTime) //|| time >= leaveTime


//time == (int) triangularAV(13, 0.2) || time >= leaveTime

//time >= leaveTime


]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983893</Id>
					<Name><![CDATA[transition3]]></Name>
					<X>450</X><Y>820</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>30</Y></Point>
						<Point><X>100</X><Y>30</Y></Point>
						<Point><X>100</X><Y>0</Y></Point>
						<Point><X>220</X><Y>0</Y></Point>
						<Point><X>290</X><Y>0</Y></Point>
					</Points>
					<IconOffset>220.0</IconOffset>
					<Properties Source="1518627219171" Target="1521208618045" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[time == uniform_discr(arrivalTime, leaveTime)

//time == (int)triangular(0, 24, 13)
//time == (int) triangularAV(12, 0.3) //|| time >= leaveTime


]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983901</Id>
					<Name><![CDATA[transition4]]></Name>
					<X>778</X><Y>890</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-108</X><Y>0</Y></Point>
						<Point><X>-109</X><Y>20</Y></Point>
					</Points>
					<IconOffset>33.0</IconOffset>
					<Properties Source="1518454983879" Target="1518454983881" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "OOB"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983903</Id>
					<Name><![CDATA[transition5]]></Name>
					<X>790</X><Y>900</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-1</X><Y>30</Y></Point>
					</Points>
					<IconOffset>24.0</IconOffset>
					<Properties Source="1518454983879" Target="1518454983883" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "A14"|| otherRoom.officeName == "A7"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1518454983905</Id>
					<Name><![CDATA[transition6]]></Name>
					<X>802</X><Y>890</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>88</X><Y>0</Y></Point>
						<Point><X>87</X><Y>30</Y></Point>
					</Points>
					<IconOffset>33.0</IconOffset>
					<Properties Source="1518454983879" Target="1518454983885" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "A12" || otherRoom.officeName == "A1"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983907</Id>
					<Name><![CDATA[enterSchool]]></Name>
					<X>460</X><Y>490</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>180</Y></Point>
					</Points>
					<IconOffset>30.0</IconOffset>
					<Properties Source="1518454983887" Target="1521544499003" Trigger="condition">
						<Action><![CDATA[//System.out.println(time + " enter school" + day);]]></Action>
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[arrivalTime == time && day != 1 && day != 7]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1518454983909</Id>
					<Name><![CDATA[statechart]]></Name>
					<X>500</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<Properties Target="1518454983887">
						<Action><![CDATA[currentOffice = null;
]]></Action>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983911</Id>
					<Name><![CDATA[leaveSchool]]></Name>
					<X>510</X><Y>800</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>10</X><Y>0</Y></Point>
						<Point><X>10</X><Y>-100</Y></Point>
					</Points>
					<IconOffset>30.0</IconOffset>
					<Properties Source="1518627219171" Target="1521545118211" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[time >= leaveTime]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983913</Id>
					<Name><![CDATA[transition]]></Name>
					<X>750</X><Y>783</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-43</Y></Point>
						<Point><X>-80</X><Y>-43</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518454983871" Target="1521212817711" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[20 + 10*Math.random()]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518454983919</Id>
					<Name><![CDATA[transition1]]></Name>
					<X>450</X><Y>480</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-20</X><Y>0</Y></Point>
						<Point><X>-20</X><Y>190</Y></Point>
					</Points>
					<IconOffset>60.0</IconOffset>
					<Properties Source="1518454983887" Target="1521544499003" Trigger="condition">
						<Action><![CDATA[//System.out.println(time + "transition " + day)]]></Action>
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
						</Timeout>
						<Condition><![CDATA[(day == 1 || day == 7) && (uniform_discr(1, 30) == 1) && (arrivalTime == time)

]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_SECOND]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA[Sample_Message]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519738045792</Id>
					<Name><![CDATA[transition2]]></Name>
					<X>278</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-58</X><Y>0</Y></Point>
						<Point><X>-58</X><Y>-40</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519737995032" Target="1519737979401" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "B14"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519738098863</Id>
					<Name><![CDATA[transition7]]></Name>
					<X>290</X><Y>650</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-70</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519737995032" Target="1519738072141" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "B13" || otherRoom.officeName == "A13"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1519738156411</Id>
					<Name><![CDATA[transition8]]></Name>
					<X>302</X><Y>660</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>68</X><Y>0</Y></Point>
						<Point><X>68</X><Y>-30</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1519737995032" Target="1519738081017" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[otherRoom.officeName == "A15" || otherRoom.officeName == "B15"]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>false</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519747128717</Id>
					<Name><![CDATA[transition9]]></Name>
					<X>430</X><Y>820</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>110</Y></Point>
						<Point><X>210</X><Y>110</Y></Point>
					</Points>
					<IconOffset>40.0</IconOffset>
					<Properties Source="1518627219171" Target="1518454983881" Trigger="message">
						<Action><![CDATA[otherRoom = get_Main().findOffice("OOB");
moveToANewOffice(otherRoom);
//System.out.println("lets go out!")]]></Action>
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<Guard><![CDATA[randomTrue(groupProb);]]></Guard>
						<MessageType><![CDATA[String]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["outside"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1519749011906</Id>
					<Name><![CDATA[transition10]]></Name>
					<X>440</X><Y>820</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>160</Y></Point>
						<Point><X>110</X><Y>160</Y></Point>
						<Point><X>460</X><Y>160</Y></Point>
						<Point><X>460</X><Y>140</Y></Point>
					</Points>
					<IconOffset>120.0</IconOffset>
					<Properties Source="1518627219171" Target="1518454983885" Trigger="message">
						<Action><![CDATA[otherRoom = get_Main().findOffice("A12"); 
moveToANewOffice(otherRoom);
//System.out.println("Come to seminar");]]></Action>
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<Guard><![CDATA[randomTrue(groupProb) && (day == 4 || day == 5);]]></Guard>
						<MessageType><![CDATA[String]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[equalsTo]]></FilterType>
						<EqualsExpression><![CDATA["seminar"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1520354761183</Id>
					<Name><![CDATA[transition11]]></Name>
					<X>778</X><Y>890</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>-118</X><Y>-40</Y></Point>
						<Point><X>-188</X><Y>-40</Y></Point>
						<Point><X>-188</X><Y>-10</Y></Point>
						<Point><X>-298</X><Y>-10</Y></Point>
						<Point><X>-299</X><Y>-70</Y></Point>
					</Points>
					<IconOffset>50.0</IconOffset>
					<Properties Source="1518454983879" Target="1518627219171" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[breakLoop==1]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="shortBreakRooms" ParentStateId="1518454983867">
					<Id>1521130935560</Id>
					<Name><![CDATA[transition12]]></Name>
					<X>290</X><Y>710</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-40</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1521130912526" Target="1519737995032" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="InOtherRooms" ParentStateId="1518454983871">
					<Id>1521208681652</Id>
					<Name><![CDATA[transition13]]></Name>
					<X>790</X><Y>840</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<IconOffset>10.0</IconOffset>
					<Properties Source="1521208618045" Target="1518454983879" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1521212717255</Id>
					<Name><![CDATA[transition14]]></Name>
					<X>360</X><Y>810</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>50</X><Y>0</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1521212645719" Target="1518627219171" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1521212845141</Id>
					<Name><![CDATA[transition15]]></Name>
					<X>590</X><Y>760</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
						<Point><X>-80</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1521212817711" Target="1518627219171" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1521544812001</Id>
					<Name><![CDATA[transition16]]></Name>
					<X>440</X><Y>700</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>90</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1521544499003" Target="1518627219171" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1521545974268</Id>
					<Name><![CDATA[transition17]]></Name>
					<X>530</X><Y>670</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-180</Y></Point>
					</Points>
					<IconOffset>60.0</IconOffset>
					<Properties Source="1521545118211" Target="1518454983887" Trigger="timeout">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[5]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[true]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Events>
				<Event>
					<Id>1518651406883</Id>
					<Name><![CDATA[getTimeAndDay]]></Name>
					<X>240</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1518732000000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[day = getDayOfWeek();
time = getHourOfDay();
simulationTime = time();
get_Main().simulationTime = time();

//System.out.println("day= " + day + "time =" + time );]]></Action>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[void]]></ReturnType>
					<Id>1518452806694</Id>
					<Name><![CDATA[moveToANewOffice]]></Name>
					<Description><![CDATA[Move from current zone to another]]></Description>
					<X>270</X><Y>210</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_office]]></Name>
						<Type><![CDATA[Office]]></Type>
					</Parameter>
					<Body><![CDATA[// this function moves a user to the given office
if ( (currentOffice != null) && ((currentOffice != target_office)) ) {
	// calculate relocation from current office to target office
	get_Main().movesCounter[currentOffice.getIndex()][target_office.getIndex()]++;
}

if ( currentOffice != null ) {
	currentOffice.leaveOffice( this );
	currentOffice = null;
}

currentOffice = target_office;
currentOffice.joinOffice( this );

selectRndLocInOffice();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[void]]></ReturnType>
					<Id>1518452806696</Id>
					<Name><![CDATA[selectRndLocInOffice]]></Name>
					<X>270</X><Y>240</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// this function selects a random point in a polyline
// around the current zone
ShapePolyLine pl = currentOffice.shape_line;
int p_x, p_y;

Point p = pl.randomPointInside();
p_x = (int)p.getX();
p_y = (int)p.getY();
/*do {
	p_x = uniform_discr((int)(get_Main().image.getX()), (int)(get_Main().image.getX() + get_Main().image.getWidth()));  
	p_y = uniform_discr((int)(get_Main().image.getY()), (int)(get_Main().image.getY() + get_Main().image.getHeight()));  
} while ( !pl.contains( p_x, p_y ) );
*/    
this.setXY(p_x, p_y);
//System.out.println(currentOffice.officeName + " " + p_x + " " + p_y);






]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[Office]]></ReturnType>
					<Id>1518452806698</Id>
					<Name><![CDATA[selectCorridor]]></Name>
					<X>270</X><Y>270</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int k = (int) uniform_discr(1, 1);
Office z;
/*switch (k) {
    case 1: z = get_Main().findOffice("B02"); break;
    default: z = get_Main().findOffice("B02"); break;
}*/
 z = get_Main().findOffice("B02");
return z;
          
//return null;]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[Office]]></ReturnType>
					<Id>1518452806700</Id>
					<Name><![CDATA[selectOtherRoom]]></Name>
					<X>270</X><Y>300</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int k = (int) uniform_discr(1, 5);
Office z;
switch (k) {
	    case 1: z = get_Main().findOffice("A1"); break;
	    case 2: z = get_Main().findOffice("A14"); break;
	    case 3: z = get_Main().findOffice("A7"); break;
	    case 4: z = get_Main().findOffice("OOB"); break;
	    case 5: z = get_Main().findOffice("A12"); break;
	    default: z = get_Main().findOffice("A12"); break;
}

return z;

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[void]]></ReturnType>
					<Id>1518452806702</Id>
					<Name><![CDATA[setArrivalTimeAndLeaveTime]]></Name>
					<X>270</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[//System.out.println("I am here and stereotype is " + stereotype1 );
//System.out.println("starting  " + arrivalTime);

if (stereotype1== 1) {
   arrivalTime = uniform_discr(6, 8);
   //System.out.println("s1 and arrival time is " + arrivalTime );
   }
if (stereotype1==2) {
   arrivalTime = uniform_discr(9, 10);
   //System.out.println("s2 and arrival time is " + arrivalTime );
   }
if (stereotype1== 3) {
   arrivalTime = uniform_discr(10, 13);
   //System.out.println("s3 and arrival time is " + arrivalTime);
   }

if (uniform_discr(1, 10) > 4) {
   leaveTime = uniform_discr(16, 19);
   //System.out.println("leave" + leaveTime);
   }
   else {
   leaveTime = uniform_discr(13, 21);
   //leaveTime = uniform_discr(arrivalTime, 21);
   //System.out.println("leave"+ leaveTime);
   }
//System.out.println("ending  " + arrivalTime);]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>RETURNS_VALUE</ReturnModificator>
					<ReturnType><![CDATA[Office]]></ReturnType>
					<Id>1519739002167</Id>
					<Name><![CDATA[selectOtherRoom2]]></Name>
					<X>270</X><Y>330</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[int k = (int) uniform_discr(1, 5);
Office z;
switch (k) {
    case 1: z = get_Main().findOffice("B14"); break;
    case 2: z = get_Main().findOffice("A15"); break;
    case 3: z = get_Main().findOffice("B15"); break;
    case 4: z = get_Main().findOffice("B13"); break;
    case 5: z = get_Main().findOffice("A13"); break;
    default: z = get_Main().findOffice("B14"); break;
}
/*check which floor and assign nearest Toilet*/
if (z.officeName == "A13" || z.officeName == "B13" ){

	switch ((int)ownOffice.floor) {
		    case 1: z = get_Main().findOffice("A13"); break;
		    case 2: z = get_Main().findOffice("B13"); break;
	}

}

/*check which floor and assign nearest Printer*/
if (z.officeName == "A15" || z.officeName == "B15" ){

	switch ((int)ownOffice.floor) {
		    case 1: z = get_Main().findOffice("A15"); break;
		    case 2: z = get_Main().findOffice("B15"); break;
	}

}


return z;

]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1520955595300</Id>
					<Name><![CDATA[trajectorySelection]]></Name>
					<X>270</X><Y>360</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_office]]></Name>
						<Type><![CDATA[Office]]></Type>
					</Parameter>
					<Body><![CDATA[ShapePolyLine current_zone;
ShapePolyLine target_zone ; 

if (target_office.floor != currentOffice.floor){

//select stair probability

double st1 = 0;
double st2 = 0;
double st3 = 0;

Office z;

if (currentOffice.floor == 1){
//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F1"){
	
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F2"){
			st1 = 0.6;
			st2 = 0.3;
			st3 = 0.1;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2)){
			
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B18");
				trajectoryRooms.add("B14");
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S2");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			

		}else if (target_zone.getName()=="zone2F2"){
			st1 = 0.4;
			st2 = 0.5;
			st3 = 0.1;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B14");
				trajectoryRooms.add("B18");
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}		
		
		}else if (target_zone.getName()=="zone3F2"){
			st1 = 0.4;
			st2 = 0.4;
			st3 = 0.2;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B14");	
				trajectoryRooms.add("B18");		
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");	
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
							
		}	
	
	}else if(current_zone.getName()=="zone2F1"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F2"){
			st1 = 0.3;
			st2 = 0.4;
			st3 = 0.3;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
										
					
		}else if (target_zone.getName()=="zone2F2"){
			st1 = 0.2;
			st2 = 0.5;
			st3 = 0.3;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
		
		}else if (target_zone.getName()=="zone3F2"){
			st1 = 0.1;
			st2 = 0.3;
			st3 = 0.6;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
				
		}	
	}else if (current_zone.getName()=="zone3F1"){
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F2"){
			st1 = 0.2;
			st2 = 0.7;
			st3 = 0.1;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			
		///////////////////////////
		}else if (target_zone.getName()=="zone2F2"){
			st1 = 0.1;
			st2 = 0.8;
			st3 = 0.1;
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
		///////////////////////
		
		}else if (target_zone.getName()=="zone3F2"){
			st1 = 0.05;
			st2 = 0.5;
			st3 = 0.45;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
		///////////////////////	
		}
	
	}else if(current_zone.getName()=="zone4F1"){
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F2"){
			st1 = 0.2;
			st2 = 0.3;
			st3 = 0.5;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("C3");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			/////////////////
		
		}else if (target_zone.getName()=="zone2F2"){
			st1 = 0.1;
			st2 = 0.1;
			st3 = 0.8;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("C3");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			
			/////////////
		
		}else if (target_zone.getName()=="zone3F2"){
			st1 = 0.05;
			st2 = 0.05;
			st3 = 0.9;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;			    
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			trajectoryRooms.add("C4");
			trajectoryRooms.add("C3");
			trajectoryRooms.add("B18");
			trajectoryRooms.add("S3");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			
			///////////////////////		
		}
	}

}	

if (currentOffice.floor == 2){

//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F2"){
	
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			st1 = 0.75;
			st2 = 0.2;
			st3 = 0.05;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						    
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B18");
				trajectoryRooms.add("B14");
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");
	
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			//////////////
		
		}else if (target_zone.getName()=="zone2F1"){
			st1 = 0.7;
			st2 = 0.25;
			st3 = 0.05;
						
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");	
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			//////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){
			st1 = 0.6;
			st2 = 0.45;
			st3 = 0.05;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");	
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			
			/////////////////		
		}else if (target_zone.getName()=="zone4F1"){
			st1 = 0.4;
			st2 = 0.2;
			st3 = 0.4;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");		
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			///////////////////////////	
		}
	
	
	
	}else if(current_zone.getName()=="zone2F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			st1 = 0.25;
			st2 = 0.7;
			st3 = 0.05;
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");						
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//////////////////////
		
		}else if (target_zone.getName()=="zone2F1"){
			st1 = 0.25;
			st2 = 0.7;
			st3 = 0.05;
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");	
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");						
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			///////////////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){
			st1 = 0.15;
			st2 = 0.9;
			st3 = 0.05;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");		
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			/////////////////////////		
		}else if (target_zone.getName()=="zone4F1"){
			st1 = 0.05;
			st2 = 0.4;
			st3 = 0.55;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");						
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			///////////////////////	
		}
	
	}else if(current_zone.getName()=="zone3F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			st1 = 0.3;
			st2 = 0.65;
			st3 = 0.05;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");		
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
		//////////////////////
		}else if (target_zone.getName()=="zone2F1"){
			st1 = 0.05;
			st2 = 0.4;
			st3 = 0.6;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");						
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
		///////////////////////
		}else if (target_zone.getName()=="zone3F1"){
			st1 = 0.05;
			st2 = 0.5;
			st3 = 0.45;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");		
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
		////////////////////	
		}else if (target_zone.getName()=="zone4F1"){
			st1 = 0.01;
			st2 = 0.1;
			st3 = 0.89;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
						
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
						trajectoryRooms.add("S2");		
					    break;			    
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			    
			    int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;			    
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
		/////////////////////////	
		}
	}
}






} else {

//select trajectory

	Office z;
	if (currentOffice.floor == 2){
		z = get_Main().findOffice("B18");
		if(z.users.isEmpty()==true){
			//turn on lights for the rooms on the path
			for (Light lgt : z.lights) {
				lgt.trajectLightOn = true;
				lgt.lightOn = true;
			}
		}
	}
	
	if (currentOffice.floor == 1){
	
		//check current zone
		current_zone = currentOffice.zone;
		// check target zone	
		target_zone = target_office.zone;
		
		if(current_zone.getName()=="zone1F1"){
		
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				trajectoryRooms.add("C1");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
			}else if (target_zone.getName()=="zone2F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if(current_zone.getName()=="zone2F1"){
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				trajectoryRooms.add("C2");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;				    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if (current_zone.getName()=="zone3F1"){
			//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					trajectoryRooms.add("C4");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone3F4"){
				
					trajectoryRooms.add("C4");
					trajectoryRooms.add("C3");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		
		}else if(current_zone.getName()=="zone4F1"){
		
				//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					trajectoryRooms.add("C4");
					trajectoryRooms.add("C3");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone3F4"){
				
					trajectoryRooms.add("C3");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		

		}

		
	////////////////////////////
	}
	

} 



]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1527931190902</Id>
					<Name><![CDATA[trajectoryRandomSelection]]></Name>
					<X>270</X><Y>390</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_office]]></Name>
						<Type><![CDATA[Office]]></Type>
					</Parameter>
					<Body><![CDATA[ShapePolyLine current_zone;
ShapePolyLine target_zone ; 

if (target_office.floor != currentOffice.floor){

//select stair probability

double st1 = 0;
double st2 = 0;
double st3 = 0;

Office z;

if (currentOffice.floor == 1){
//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F1"){
	
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")||(target_zone.getName()=="zone2F2")||(target_zone.getName()=="zone3F2")){
			
			//Since it random selection stair selection is not necessary.Random route is selected froma predefined set.
				int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S3");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
						trajectoryRooms.add("B18");
					    break;	
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;						
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			
			

		}	
	
	}else if(current_zone.getName()=="zone2F1"){
	
		//check target zone and choose random route from predeifned set

		if((target_zone.getName()=="zone1F2")||(target_zone.getName()=="zone2F2")||(target_zone.getName()=="zone3F2")){
		
				int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 3: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
																	
		}	
	}else if (current_zone.getName()=="zone3F1"){
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")||(target_zone.getName()=="zone2F2")||(target_zone.getName()=="zone3F2")){
	
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 		
			
		///////////////////////////
		}
	
	}else if(current_zone.getName()=="zone4F1"){
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")||(target_zone.getName()=="zone2F2")||(target_zone.getName()=="zone3F2")){

				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 4: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;								
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			/////////////////
		
		}
	}

}	

if (currentOffice.floor == 2){

//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F2"){
	
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			    
			    int k = (int) uniform_discr(1, 4);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");		
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;								
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			//////////////
		
		}else if (target_zone.getName()=="zone2F1"){
						
				int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			  						
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
				
			//////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){
						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;		
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			
			/////////////////		
		}else if (target_zone.getName()=="zone4F1"){

						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			
			///////////////////////////	
		}
	
	
	}else if(current_zone.getName()=="zone2F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){

						
				int k = (int) uniform_discr(1, 4);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");		
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;									
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

			//////////////////////
		
		}else if (target_zone.getName()=="zone2F1"){
						
				int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			  					
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

			///////////////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){

						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;		
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			/////////////////////////		
		}else if (target_zone.getName()=="zone4F1"){
						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			///////////////////////	
		}
	
	}else if(current_zone.getName()=="zone3F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){

						
				int k = (int) uniform_discr(1, 4);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");		
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;									
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

		//////////////////////
		}else if (target_zone.getName()=="zone2F1"){

						
				int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			  				
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

		///////////////////////
		}else if (target_zone.getName()=="zone3F1"){

						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;				
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

		////////////////////	
		}else if (target_zone.getName()=="zone4F1"){
						
				int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;				
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

		/////////////////////////	
		}
	}
}






} else {

//select trajectory

	Office z;
	if (currentOffice.floor == 2){
		z = get_Main().findOffice("B18");
		if(z.users.isEmpty()==true){
			//turn on lights for the rooms on the path
			for (Light lgt : z.lights) {
				lgt.trajectLightOn = true;
				lgt.lightOn = true;
			}
		}
	}
	
	if (currentOffice.floor == 1){
	
		//check current zone
		current_zone = currentOffice.zone;
		// check target zone	
		target_zone = target_office.zone;
		
		if(current_zone.getName()=="zone1F1"){
		
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				trajectoryRooms.add("C1");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
			}else if (target_zone.getName()=="zone2F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if(current_zone.getName()=="zone2F1"){
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				trajectoryRooms.add("C2");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;				    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if (current_zone.getName()=="zone3F1"){
			//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					trajectoryRooms.add("C4");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;			    
					}
					
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		
		}else if(current_zone.getName()=="zone4F1"){
		
				//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;			    
					}
					
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					trajectoryRooms.add("C3");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		

		}

		
	////////////////////////////
	}
	

} 







]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1527931393586</Id>
					<Name><![CDATA[trajectoryEntrySelection]]></Name>
					<X>270</X><Y>420</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[double st1 = 0;
double st2 = 0;
double st3 = 0;
ShapePolyLine target_zone = ownOffice.zone;
Office z;
//  Floor 2 Officecheck target zone and assign stair probability
		if(target_zone.getName()=="zone1F2"){
			st1 = 0.6;
			st2 = 0.3;
			st3 = 0.1;
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2)){
			
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B18");
				trajectoryRooms.add("B14");
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S3");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
						trajectoryRooms.add("B18");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
			

		}else if (target_zone.getName()=="zone2F2"){
			st1 = 0.4;
			st2 = 0.5;
			st3 = 0.1;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B14");
				trajectoryRooms.add("B18");
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}		
		
		}else if (target_zone.getName()=="zone3F2"){
			st1 = 0.4;
			st2 = 0.4;
			st3 = 0.2;	
			
			double randompick = uniform();
			//since both trajectories have similar route
			if(randompick<=(st1+st2) ){
			
				trajectoryRooms.add("C1");
				trajectoryRooms.add("B14");	
				trajectoryRooms.add("B18");		
				trajectoryRooms.add("S1");
				trajectoryRooms.add("S2");	
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			//if stair 3 is picked
			if(randompick>(st1+st2)){
			
				int k = (int) uniform_discr(1, 2);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;			    
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			}
			
							
		}
		
// Floor 1 Office check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				trajectoryRooms.add("C1");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
			}else if (target_zone.getName()=="zone2F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}	]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1527948694248</Id>
					<Name><![CDATA[trajectoryProbabilitySelection]]></Name>
					<X>500</X><Y>180</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_office]]></Name>
						<Type><![CDATA[Office]]></Type>
					</Parameter>
					<Body><![CDATA[ShapePolyLine current_zone;
ShapePolyLine target_zone ; 

if (target_office.floor != currentOffice.floor){

Office z;

if (currentOffice.floor == 1){
//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F1"){
	
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")){
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.6;
			double t4 = 0.4;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if(randompick>t3){
				k=4;
			}
			
			//Since it random selection stair selection is not necessary.Random route is selected froma predefined set.
				//int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S3");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
						trajectoryRooms.add("B18");
					    break;	
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;						
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			
			

		}
		if((target_zone.getName()=="zone2F2")){
			
			//Since it random selection stair selection is not necessary.Random route is selected froma predefined set.
				
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.4;
			double t4 = 0.6;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if(randompick>t3){
				k=4;
			}
				
				//int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S3");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
						trajectoryRooms.add("B18");
					    break;	
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;						
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			
			

		}
		if((target_zone.getName()=="zone3F2")){
			
			//Since it random selection stair selection is not necessary.Random route is selected froma predefined set.
			
			double t1 = 0.0;
			double t2 = 0.6;
			double t3 = 0.0;
			double t4 = 0.4;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t2){
				k=2;
			}else if(randompick>t2){
				k=4;
			}
				//int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 	
						trajectoryRooms.add("S3");					
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("S3");
						trajectoryRooms.add("B18");
					    break;	
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;						
				}
			
			
				
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

		}		
	
	}else if(current_zone.getName()=="zone2F1"){
	
		//check target zone and choose random route from predeifned set

		if((target_zone.getName()=="zone1F2")){
		
			double t1 = 0.4;
			double t2 = 0.0;
			double t3 = 0.5;
			double t4 = 0.0;
			double t5 = 0.1;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)&&(randompick<=(t1+t3))){
				k=3;
			}else if((randompick>(t1+t3))){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 3: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
																	
		}	
		if((target_zone.getName()=="zone2F2")){
		
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.4;
			double t4 = 0.0;
			double t5 = 0.6;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 3: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
																	
		}
		if((target_zone.getName()=="zone3F2")){
		
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.2;
			double t4 = 0.0;
			double t5 = 0.8;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 3: 			    
					    trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
																	
		}
	}else if (current_zone.getName()=="zone3F1"){
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")){
		
			double t1 = 0.7;
			double t2 = 0.0;
			double t3 = 0.3;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=1;
			}
	
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 		
			
		///////////////////////////
		}
		if((target_zone.getName()=="zone2F2")){
	
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.4;
			double t4 = 0.0;
			double t5 = 0.6;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}
	
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S2");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 		
			
		///////////////////////////
		}
		if((target_zone.getName()=="zone3F2")){
	
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.2;
			double t4 = 0.0;
			double t5 = 0.8;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t1)){
				k=5;
			}
	
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;						
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 		
			
		///////////////////////////
		}
		
	
	}else if(current_zone.getName()=="zone4F1"){
	//check target zone and assign stair probability
		if((target_zone.getName()=="zone1F2")){

			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.1;
			double t4 = 0.0;
			double t5 = 0.9;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 4: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;								
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			/////////////////
		
		}
		if((target_zone.getName()=="zone2F2")){

			double t1 = 0.1;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.9;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 4: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;								
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			/////////////////
		
		}
		if((target_zone.getName()=="zone3F2")){

			double t1 = 0.01;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.99;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t5)){
				k=5;
			}
		
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 2: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S1");
					    break;	
					case 4: 
					    trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;	
					case 5: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;								
				}		
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			/////////////////
		
		}
	}

}	

if (currentOffice.floor == 2){

//check current zone
	current_zone = currentOffice.zone;
// check target zone	
	target_zone = target_office.zone;
	
	if(current_zone.getName()=="zone1F2"){
	
	//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			    
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.8;
			double t4 = 0.2;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=4;
			}
				
			    //int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 2: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");		
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");		
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;						
				}		

				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			//////////////
		
		}else if (target_zone.getName()=="zone2F1"){
						
			double t1 = 0.9;
			double t2 = 0.0;
			double t3 = 0.1;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=3;
			}	
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			  						
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
				
			//////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){
			double t1 = 0.9;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.1;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=4;
			}
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;	
							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			
			/////////////////		
		}else if (target_zone.getName()=="zone4F1"){
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.01;
			double t4 = 0.0;
			double t5 = 0.99;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}
						
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

			
			///////////////////////////	
		}
	
	
	}else if(current_zone.getName()=="zone2F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){
			double t1 = 0.7;
			double t2 = 0.3;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t2){
				k=2;
			}else if((randompick>t2)){
				k=1;
			}
						
				//int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");	
						trajectoryRooms.add("C1");						
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

			//////////////////////
		
		}else if (target_zone.getName()=="zone2F1"){
			double t1 = 0.7;
			double t2 = 0.0;
			double t3 = 0.3;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=3;
			}	
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;			  									
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

			///////////////////////////////
		
		}else if (target_zone.getName()=="zone3F1"){
			double t1 = 0.7;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.3;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=4;
			}
						
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;					
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			
			/////////////////////////		
		}else if (target_zone.getName()=="zone4F1"){
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.1;
			double t4 = 0.0;
			double t5 = 0.9;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=5;
			}			
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			
			///////////////////////	
		}
	
	}else if(current_zone.getName()=="zone3F2"){
	
		//check target zone and assign stair probability
		if(target_zone.getName()=="zone1F1"){

			double t1 = 0.6;
			double t2 = 0.4;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=2;
			}		
				//int k = (int) uniform_discr(1, 4);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 4: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");	
						trajectoryRooms.add("C1");						
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;							
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

		//////////////////////
		}else if (target_zone.getName()=="zone2F1"){

			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.3;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.7;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t3){
				k=3;
			}else if((randompick>t3)){
				k=6;
			}				
				//int k = (int) uniform_discr(1, 6);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;
					case 6: 
					    trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");					
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");	
					    break;					
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 

		///////////////////////
		}else if (target_zone.getName()=="zone3F1"){
			double t1 = 0.0;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.1;
			double t5 = 0.9;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t4){
				k=4;
			}else if((randompick>t4)){
				k=5;
			}		
						
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 3: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");	
					    break;
					case 4: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;						
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

		////////////////////	
		}else if (target_zone.getName()=="zone4F1"){
			double t1 = 0.01;
			double t2 = 0.0;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.99;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=5;
			}					
				//int k = (int) uniform_discr(1, 5);
				switch (k) {
				    case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S2");
					    break;
					case 2: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C3");	
						trajectoryRooms.add("C2");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");	
					    break;
					case 3: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("B14");
						trajectoryRooms.add("S1");
					    break;
					case 4: 
					    trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");				
						trajectoryRooms.add("B18");	
						trajectoryRooms.add("S2");		
					    break;	
					case 5: 			    
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("B18");
						trajectoryRooms.add("S3");
					    break;								
				}				    
					
				for (String roomName : trajectoryRooms) {
				
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
					
				   	//System.out.println("Office name = " + z.officeName);
				  } 
			

		/////////////////////////	
		}
	}
}






} else {

//select trajectory

	Office z;
	if (currentOffice.floor == 2){
		z = get_Main().findOffice("B18");
		if(z.users.isEmpty()==true){
			//turn on lights for the rooms on the path
			for (Light lgt : z.lights) {
				lgt.trajectLightOn = true;
				lgt.lightOn = true;
			}
		}
	}
	
	if (currentOffice.floor == 1){
	
		//check current zone
		current_zone = currentOffice.zone;
		// check target zone	
		target_zone = target_office.zone;
		
		if(current_zone.getName()=="zone1F1"){
		
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
				trajectoryRooms.add("C1");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
			}else if (target_zone.getName()=="zone2F1"){
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}		
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}		
				
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}		
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C1");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if(current_zone.getName()=="zone2F1"){
		//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
			double t1 = 0.99;
			double t2 = 0.01;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=2;
			}		
			
				//int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C2");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				trajectoryRooms.add("C2");
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;				    
					}
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}		
		
		}else if (current_zone.getName()=="zone3F1"){
			//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
			double t1 = 0.99;
			double t2 = 0.01;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=2;
			}
			
				//int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
				//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
				
					trajectoryRooms.add("C4");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
						if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;			    
					}
					
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		
		}else if(current_zone.getName()=="zone4F1"){
		
				//check target zone and assign stair probability
			if(target_zone.getName()=="zone1F1"){
			
			double t1 = 0.99;
			double t2 = 0.01;
			double t3 = 0.0;
			double t4 = 0.0;
			double t5 = 0.0;
			double t6 = 0.0;
			
			double randompick = uniform();
			int k =0;
			if(randompick<=t1){
				k=1;
			}else if((randompick>t1)){
				k=2;
			}
			
				//int k = (int) uniform_discr(1, 2);
				switch (k) {
					case 1: 			    
						trajectoryRooms.add("C1");
						trajectoryRooms.add("C4");
						break;
					case 2: 
						trajectoryRooms.add("C4");
						trajectoryRooms.add("C3");
						trajectoryRooms.add("C2");
						trajectoryRooms.add("C1");
						break;			    
					}				
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
					} 
			
			

			}else if (target_zone.getName()=="zone2F1"){
				
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
				//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							trajectoryRooms.add("C2");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							break;			    
					}
				
			
				for (String roomName : trajectoryRooms) {
					
					z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
					//System.out.println("Office name = " + z.officeName);
				} 
				
					
			
			}else if (target_zone.getName()=="zone3F1"){
			
				double t1 = 0.99;
				double t2 = 0.01;
				double t3 = 0.0;
				double t4 = 0.0;
				double t5 = 0.0;
				double t6 = 0.0;
				
				double randompick = uniform();
				int k =0;
				if(randompick<=t1){
					k=1;
				}else if((randompick>t1)){
					k=2;
				}
				
					//int k = (int) uniform_discr(1, 2);
					switch (k) {
						case 1: 			    
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C3");
							break;
						case 2: 
							trajectoryRooms.add("C4");
							trajectoryRooms.add("C1");
							trajectoryRooms.add("C2");
							trajectoryRooms.add("C3");
							break;			    
					}
					
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}else if (target_zone.getName()=="zone4F1"){
				
					trajectoryRooms.add("C3");
								
					for (String roomName : trajectoryRooms) {
					
						z = get_Main().findOffice(roomName);
					if(z.users.isEmpty()==true){
						//turn on lights for the rooms on the path
						for (Light lgt : z.lights) {
							lgt.trajectLightOn = true;
							lgt.lightOn = true;
						}
					
					}
						
						//System.out.println("Office name = " + z.officeName);
					} 		
			}
		

		}

		
	////////////////////////////
	}
	

} 







]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1518189428684</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<StatechartReference>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[User]]></ClassName>
						<ItemName><![CDATA[statechart]]></ItemName>
					</StatechartReference>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1518189428731</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1679324068743</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Group>
					<Id>1518189428690</Id>
					<Name><![CDATA[person]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>-20</X><Y>20</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<VisibleCode><![CDATA[currentOffice != null ]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>

			<Presentation>
				<Curve ControlPoints="true">
					<Id>1518189428692</Id>
					<Name><![CDATA[shapeBody]]></Name>
					<X>-2</X><Y>-7</Y>
					<Label><X>-20</X><Y>28</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor/>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<FillColor>-16777216</FillColor>
					<FillMaterial>null</FillMaterial>
					<Points>
					   <Point><X>0</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>-2</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>-1</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>3</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>17</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>9</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>11</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>10</Y><Z>0</Z></Point>
					   <Point><X>6</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>5</X><Y>3</Y><Z>0</Z></Point>
					   <Point><X>1</X><Y>2</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>4</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>0</Y><Z>0</Z></Point>
					   <Point><X>4</X><Y>-3</Y><Z>0</Z></Point>
					   <Point><X>0</X><Y>-3</Y><Z>0</Z></Point>
					</Points>
					<Closed>true</Closed>
				</Curve>
			</Presentation>

				</Group>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
		<!--   =========   Active Object Class   ========  -->
		<ActiveObjectClass>
			<Id>1518190574234</Id>
			<Name><![CDATA[Light]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<Generic>false</Generic>
			<GenericParameter>
				<Id>1518190574233</Id>
				<Name><![CDATA[1518190574233]]></Name>
				<GenericParameterValue Class="CodeValue">
					<Code><![CDATA[T extends Agent]]></Code>
				</GenericParameterValue>
				<GenericParameterLabel><![CDATA[Generic parameter:]]></GenericParameterLabel>
			</GenericParameter>
			<FlowChartsUsage>ENTITY</FlowChartsUsage>
			<SamplesToKeep>100</SamplesToKeep>
			<LimitNumberOfArrayElements>false</LimitNumberOfArrayElements>
			<ElementsLimitValue>100</ElementsLimitValue>
			<MakeDefaultViewArea>true</MakeDefaultViewArea>
			<SceneGridColor/>
			<SceneBackgroundColor/>
			<SceneSkybox>null</SceneSkybox>
			<AgentProperties>
	 			<SpaceType>CONTINUOUS</SpaceType>			
				<EnvironmentDefinesInitialLocation>true</EnvironmentDefinesInitialLocation>
				<RotateAnimationTowardsMovement>true</RotateAnimationTowardsMovement>
				<RotateAnimationVertically>true</RotateAnimationVertically>
				<VelocityCode Class="CodeUnitValue">
					<Code><![CDATA[10]]></Code>
					<Unit Class="SpeedUnits"><![CDATA[MPS]]></Unit>
				</VelocityCode>
				<PhysicalLength Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalLength>
				<PhysicalWidth Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalWidth>
				<PhysicalHeight Class="CodeUnitValue">
					<Code><![CDATA[1]]></Code>
					<Unit Class="LengthUnits"><![CDATA[METER]]></Unit>
				</PhysicalHeight>
			</AgentProperties>
			<EnvironmentProperties>
					<EnableSteps>false</EnableSteps>
					<StepDurationCode Class="CodeUnitValue">
						<Code><![CDATA[1.0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[SECOND]]></Unit>
					</StepDurationCode>
					<SpaceType>CONTINUOUS</SpaceType>
					<WidthCode><![CDATA[500]]></WidthCode>
					<HeightCode><![CDATA[500]]></HeightCode>
					<ZHeightCode><![CDATA[0]]></ZHeightCode>
					<ColumnsCountCode><![CDATA[100]]></ColumnsCountCode>
					<RowsCountCode><![CDATA[100]]></RowsCountCode>
					<NeigborhoodType>MOORE</NeigborhoodType>
					<LayoutType>USER_DEF</LayoutType>
					<LayoutTypeApplyOnStartup>true</LayoutTypeApplyOnStartup>
					<NetworkType>USER_DEF</NetworkType>
					<NetworkTypeApplyOnStartup>true</NetworkTypeApplyOnStartup>
					<ConnectionsPerAgentCode><![CDATA[2]]></ConnectionsPerAgentCode>
					<ConnectionsRangeCode><![CDATA[50]]></ConnectionsRangeCode>
					<NeighborLinkFractionCode><![CDATA[0.95]]></NeighborLinkFractionCode>
					<MCode><![CDATA[10]]></MCode>
			</EnvironmentProperties>
			<DatasetsCreationProperties>
				<AutoCreate>true</AutoCreate>
					<OccurrenceAtTime>true</OccurrenceAtTime>
					<OccurrenceDate>1518249600000</OccurrenceDate>
					<OccurrenceTime Class="CodeUnitValue">
						<Code><![CDATA[0]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</OccurrenceTime>
					<RecurrenceCode Class="CodeUnitValue">
						<Code><![CDATA[1]]></Code>
						<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
					</RecurrenceCode>
			</DatasetsCreationProperties>
			<ScaleRuler>
				<Id>1518190574231</Id>
				<Name><![CDATA[scale]]></Name>
				<X>0</X><Y>-150</Y>
				<PublicFlag>false</PublicFlag>
				<PresentationFlag>false</PresentationFlag>
				<ShowLabel>false</ShowLabel>
				<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
				<Length>100</Length>
				<Rotation>0</Rotation>
				<ScaleType>BASED_ON_LENGTH</ScaleType>
				<ModelLength>10</ModelLength>
				<LengthUnits>METER</LengthUnits>
				<Scale>10</Scale>
				<InheritedFromParentAgentType>true</InheritedFromParentAgentType>
			</ScaleRuler>
			<CurrentLevel>1679324068740</CurrentLevel>
			<ConnectionsId>1518190574230</ConnectionsId>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1518192433687</Id>
					<Name><![CDATA[power]]></Name>
					<X>90</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518192444576</Id>
					<Name><![CDATA[office]]></Name>
					<X>90</X><Y>100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[Office]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1518192449412</Id>
					<Name><![CDATA[lightOn]]></Name>
					<X>90</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521460971871</Id>
					<Name><![CDATA[trajectLightOn]]></Name>
					<X>90</X><Y>170</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[boolean]]></Type>        
					</Properties>
				</Variable>
				<Variable Class="PlainVariable">
					<Id>1521461131438</Id>
					<Name><![CDATA[trajectPower]]></Name>
					<X>90</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[double]]></Type>        
					</Properties>
				</Variable>
			</Variables>
			<StatechartElements>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518192643538</Id>
					<Name><![CDATA[off]]></Name>
					<X>470</X><Y>110</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<EntryAction><![CDATA[power = 0;
lightOn = false;]]></EntryAction>
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="State" ParentState="ROOT_NODE">
					<Id>1518192682289</Id>
					<Name><![CDATA[on]]></Name>
					<X>470</X><Y>190</Y>
					<Label><X>10</X><Y>10</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties Width="100" Height="30">
						<FillColor/>
					</Properties>
				</StatechartElement>
				<StatechartElement Class="EntryPoint" ParentState="ROOT_NODE">
					<Id>1518192641167</Id>
					<Name><![CDATA[statechart]]></Name>
					<X>510</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>40</Y></Point>
					</Points>
					<Properties Target="1518192643538">
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518192675799</Id>
					<Name><![CDATA[transition]]></Name>
					<X>520</X><Y>140</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518192643538" Target="1518192682289" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[power == 60]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
				<StatechartElement Class="Transition" ParentState="ROOT_NODE">
					<Id>1518192686579</Id>
					<Name><![CDATA[transition1]]></Name>
					<X>500</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<Points>
						<Point><X>0</X><Y>0</Y></Point>
						<Point><X>0</X><Y>-50</Y></Point>
					</Points>
					<IconOffset>20.0</IconOffset>
					<Properties Source="1518192682289" Target="1518192643538" Trigger="condition">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Condition><![CDATA[power == 0 ]]></Condition>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<MessageType><![CDATA[Object]]></MessageType>
						<DefaultTransition>true</DefaultTransition>
						<FilterType><![CDATA[unconditionally]]></FilterType>
						<EqualsExpression><![CDATA["text"]]></EqualsExpression>
						<SatisfiesExpression><![CDATA[true]]></SatisfiesExpression>
					</Properties>	
				</StatechartElement>
			</StatechartElements>
			<Events>
				<Event>
					<Id>1518192539160</Id>
					<Name><![CDATA[synchronisation_lights]]></Name>
					<X>230</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1518249600000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if (lightOn == true) {
   power =60; 
   //System.out.println("Light on");
}
else {
   power = 0;
   //System.out.println("Light off");
}]]></Action>
				</Event>
				<Event>
					<Id>1521461159592</Id>
					<Name><![CDATA[synchronisation_Tlights]]></Name>
					<X>230</X><Y>190</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties TriggerType="timeout" Mode="cyclic">
						<Timeout Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</Timeout>
						<Rate Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="RateUnits"><![CDATA[PER_MINUTE]]></Unit>
						</Rate>
						<OccurrenceAtTime>true</OccurrenceAtTime>
						<OccurrenceDate>1521532800000</OccurrenceDate>
						<OccurrenceTime Class="CodeUnitValue">
							<Code><![CDATA[0]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</OccurrenceTime>
						<RecurrenceCode Class="CodeUnitValue">
							<Code><![CDATA[1]]></Code>
							<Unit Class="TimeUnits"><![CDATA[MINUTE]]></Unit>
						</RecurrenceCode>
						<Condition><![CDATA[false]]></Condition>
					</Properties>
					<Action><![CDATA[if (trajectLightOn == true) {
   trajectPower = 60; //KW
   //System.out.println("Light on");
}
else {
   trajectPower = 0;
   //System.out.println("Light off");
}]]></Action>
				</Event>
			</Events>
			<Functions>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1518192495323</Id>
					<Name><![CDATA[moveToANewOffice]]></Name>
					<Description><![CDATA[Move from current zone to another]]></Description>
					<X>230</X><Y>70</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Parameter>
						<Name><![CDATA[target_office]]></Name>
						<Type><![CDATA[Office]]></Type>
					</Parameter>
					<Body><![CDATA[// this function moves this person to the given zone
if ( (office != null) && ((office != target_office)) ) {
	// calculate relocation from current zone to target zone
	get_Main().movesCounter[office.getIndex()][target_office.getIndex()]++;
}

if ( office != null ) {
	office.leaveOffice( this );
	office = null;
}

office = target_office;
office.joinOffice( this );

selectRndLocInOffice();]]></Body>
				</Function>
				<Function AccessType="default" StaticFunction="false">
					<ReturnModificator>VOID</ReturnModificator>
					<ReturnType><![CDATA[double]]></ReturnType>
					<Id>1518192507428</Id>
					<Name><![CDATA[selectRndLocInOffice]]></Name>
					<X>230</X><Y>110</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Body><![CDATA[// this function moves the lights into the offices

ShapePolyLine pl = office.shape_line;
int p_x, p_y;
if (office.officeName != "B18"||office.officeName != "C1"||office.officeName != "C2"||office.officeName != "C3"||office.officeName != "C4") {
    do {
	    p_x = uniform_discr((int)(get_Main().image.getX()), (int)(get_Main().image.getX() + get_Main().image.getWidth()));  
	    p_y = uniform_discr((int)(get_Main().image.getY()), (int)(get_Main().image.getY() + get_Main().image.getHeight()));  
        } while ( !pl.contains( p_x, p_y ) || p_x != (int) (pl.getX() + pl.getPointDx(2) / 2) );
    
        this.setXY(p_x, p_y);
} 
if (office.officeName == "B18"||office.officeName == "C1"||office.officeName == "C2"||office.officeName == "C3"||office.officeName == "C4") {
     do {
	    p_x = uniform_discr((int)(get_Main().image.getX()), (int)(get_Main().image.getX() + get_Main().image.getWidth()));  
	    p_y = uniform_discr((int)(get_Main().image.getY()), (int)(get_Main().image.getY() + get_Main().image.getHeight()));  
        } while ( !pl.contains( p_x, p_y ) );
    
        this.setXY(p_x, p_y);
}
]]></Body>
				</Function>
			</Functions>
			<AgentLinks>
				<AgentLink>
					<Id>1518190574230</Id>
					<Name><![CDATA[connections]]></Name>
					<X>50</X><Y>-50</Y>
					<Label><X>15</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<HandleReceiveInConnections>false</HandleReceiveInConnections>
					<AgentLinkType>COLLECTION_OF_LINKS</AgentLinkType>
					<AgentLinkBidirectional>true</AgentLinkBidirectional>
					<MessageType><![CDATA[Object]]></MessageType>
					<LineStyle>SOLID</LineStyle>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineZOrder>UNDER_AGENTS</LineZOrder>
					<LineArrow>NONE</LineArrow>
					<LineArrowPosition>END</LineArrowPosition>
				</AgentLink>
			</AgentLinks>

			<ContainerLinks>
				<ContainerLink>
					<Id>1518190574277</Id>
					<Name><![CDATA[main]]></Name>
					<X>50</X><Y>-100</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<ActiveObjectClass>
						<PackageName><![CDATA[ngimainpv2_3]]></PackageName>
						<ClassName><![CDATA[Main]]></ClassName>
					</ActiveObjectClass>
				</ContainerLink>
			</ContainerLinks>

			<Presentation>
				<Level>
					<Id>1679324068740</Id>
					<Name><![CDATA[level]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<Z>0</Z>
					<LevelVisibility>ALWAYS_SHOW</LevelVisibility>

			<Presentation>
				<Oval>
					<Id>1518190645209</Id>
					<Name><![CDATA[oval]]></Name>
					<X>0</X><Y>0</Y>
					<Label><X>0</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D</DrawMode>
					<VisibleCode><![CDATA[statechart.isStateActive(on) ]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-65536</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<RadiusX>7.5</RadiusX>
					<RadiusY>40</RadiusY>
					<Rotation>0.0</Rotation>
					<FillColor>-65536</FillColor>
					<FillMaterial>null</FillMaterial>
				</Oval>
			</Presentation>

				</Level>
			</Presentation>

		</ActiveObjectClass>
	</ActiveObjectClasses>	
	<DifferentialEquationsMethod>EULER</DifferentialEquationsMethod>
	<MixedEquationsMethod>RK45_NEWTON</MixedEquationsMethod>
	<AlgebraicEquationsMethod>MODIFIED_NEWTON</AlgebraicEquationsMethod>
	<AbsoluteAccuracy>1.0E-5</AbsoluteAccuracy>
	<FixedTimeStep>0.001</FixedTimeStep>
	<RelativeAccuracy>1.0E-5</RelativeAccuracy>
	<TimeAccuracy>1.0E-5</TimeAccuracy>
	<Frame>
		<Width>2500</Width>
		<Height>1500</Height>
	</Frame>
	<Database>
		<Logging>false</Logging>
		<AutoExport>false</AutoExport>
		<ShutdownCompact>false</ShutdownCompact>
		<ImportSettings>
		</ImportSettings>
		<ExportSettings>
		</ExportSettings>
	</Database>
	
	<RunConfiguration ActiveObjectClassId="1517934684261">
		<Id>1517934684266</Id>
		<Name><![CDATA[RunConfiguration]]></Name>
		<MaximumMemory>512</MaximumMemory>
		<ModelTimeProperties>
			<StopOption><![CDATA[Stop at specified time]]></StopOption>
			<InitialDate><![CDATA[1517875200000]]></InitialDate>	
			<InitialTime><![CDATA[0.0]]></InitialTime>	
			<FinalDate><![CDATA[1520294400000]]></FinalDate>	
			<FinalTime><![CDATA[100.0]]></FinalTime>	
		</ModelTimeProperties>
		<AnimationProperties>
			<StopNever>true</StopNever>
			<ExecutionMode>realTimeScaled</ExecutionMode>
			<RealTimeScale>1.0</RealTimeScale>
			<EnableZoomAndPanning>true</EnableZoomAndPanning>
			<EnableDeveloperPanel>false</EnableDeveloperPanel>
			<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
		</AnimationProperties>
		<Inputs>		
		</Inputs>
		<Outputs>
		</Outputs>
	</RunConfiguration>
	<Experiments>	
		<!--   =========   Simulation Experiment   ========  -->
		<SimulationExperiment ActiveObjectClassId="1517934684261">
			<Id>1517934684263</Id>
			<Name><![CDATA[Simulation]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>512</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>

			<Presentation>
				<Text>
					<Id>1517934684264</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[NGI Occupant Simulation]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>1517934684265</Id>
					<Name><![CDATA[button]]></Name>
					<X>40</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<BasicProperties Width="100" Height="30">
                        <EmbeddedIcon>false</EmbeddedIcon>	
						<TextColor/>
						<Enabled>true</Enabled>
						<ActionCode><![CDATA[if ( getState() == IDLE )
	run();
getExperimentHost().setPresentable( getEngine().getRoot() );]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Run]]></LabelText>
						<LabelCode><![CDATA[getState() == IDLE ?
	"Run" :
	"Top level agent"]]></LabelCode>
					</ExtendedProperties>
				</Control>
			</Presentation>

			<Parameters>			
			</Parameters>			
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<ExecutionMode><![CDATA[realTimeScaled]]></ExecutionMode>
				<Title><![CDATA[NGIMainPV2 : Simulation]]></Title>	
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
				<RealTimeScale>1.0</RealTimeScale>
			</PresentationProperties>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified date]]></StopOption>
				<InitialDate><![CDATA[1517866200000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1518393600000]]></FinalDate>	
				<FinalTime><![CDATA[8790.0]]></FinalTime>	
			</ModelTimeProperties>
			<BypassInitialScreen>false</BypassInitialScreen>
		</SimulationExperiment>
		<!--   =========  Parameter Variation Experiment   ========  -->
		<ParamVariationExperiment ActiveObjectClassId="1517934684261">
			<Id>1527096669478</Id>
			<Name><![CDATA[ParametersVariation]]></Name>
			<ClientAreaTopLeft><X>0</X><Y>0</Y></ClientAreaTopLeft>
			<CommandLineArguments><![CDATA[]]></CommandLineArguments>
			<MaximumMemory>512</MaximumMemory>
			<RandomNumberGenerationType>randomSeed</RandomNumberGenerationType>
			<CustomGeneratorCode>new Random()</CustomGeneratorCode>
			<BeforeSimulationRunCode><![CDATA[//root.row = iteration+root.row;
//root.row = 1+root.row;]]></BeforeSimulationRunCode>
			<SeedValue>1</SeedValue>
			<SelectionModeForSimultaneousEvents>LIFO</SelectionModeForSimultaneousEvents>
			<VmArgs><![CDATA[]]></VmArgs>
			<LoadRootFromSnapshot>false</LoadRootFromSnapshot>
			<Variables>
				<Variable Class="PlainVariable">
					<Id>1527180973799</Id>
					<Name><![CDATA[iteration]]></Name>
					<X>50</X><Y>200</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>false</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>true</ShowLabel>
					<Properties SaveInSnapshot="true" Constant="false" AccessType="public" StaticVariable="false">
						<Type><![CDATA[int]]></Type>        
						<InitialValue Class="CodeValue">
							<Code><![CDATA[1]]></Code>
						</InitialValue>
					</Properties>
				</Variable>
			</Variables>

			<Presentation>
				<Text>
					<Id>0</Id>
					<Name><![CDATA[text]]></Name>
					<X>40</X><Y>30</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12490271</Color>
					<Text><![CDATA[NGIMainPV2 : ParametersVariation]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>24</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>0</Id>
					<Name><![CDATA[text1]]></Name>
					<X>50</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-16777216</Color>
					<Text><![CDATA[Iteration:]]></Text>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>LEFT</Alignment>
				</Text>
				<Text>
					<Id>0</Id>
					<Name><![CDATA[text2]]></Name>
					<X>270</X><Y>130</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<VisibleCode><![CDATA[getCurrentIteration() > 0]]></VisibleCode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<Rotation>0.0</Rotation>
					<Color>-12042869</Color>
					<Text><![CDATA[?]]></Text>
					<TextCode><![CDATA[format(getCurrentIteration())]]></TextCode>
					<Font>
						<Name>SansSerif</Name>
						<Size>12</Size>
						<Style>0</Style>
					</Font>
					<Alignment>RIGHT</Alignment>
				</Text>
				<Line>
					<Id>0</Id>
					<Name><![CDATA[line]]></Name>
					<X>40</X><Y>150</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<EmbeddedIcon>false</EmbeddedIcon>
					<Z>0</Z>
					<ZHeight>10</ZHeight>
					<LineWidth>1</LineWidth>
					<LineColor>-16777216</LineColor>
					<LineMaterial>null</LineMaterial>
					<LineStyle>SOLID</LineStyle>
					<BeginArrowSize>1</BeginArrowSize>
					<BeginArrowStyle>0</BeginArrowStyle>
					<EndArrowSize>1</EndArrowSize>
					<EndArrowStyle>0</EndArrowStyle>
					<Dx>240</Dx>
					<Dy>0</Dy>
					<Dz>0</Dz>
				</Line>
				<Control Type="Button">
				 	<EmbeddedIcon>false</EmbeddedIcon>				
					<Id>0</Id>
					<Name><![CDATA[button]]></Name>
					<X>40</X><Y>80</Y>
					<Label><X>10</X><Y>0</Y></Label>
					<PublicFlag>true</PublicFlag>
					<PresentationFlag>true</PresentationFlag>
					<ShowLabel>false</ShowLabel>
					<DrawMode>SHAPE_DRAW_2D3D</DrawMode>
					<BasicProperties Width="100" Height="30">
                        <EmbeddedIcon>false</EmbeddedIcon>	
						<TextColor/>
						<Enabled>true</Enabled>
						<EnableExpression><![CDATA[getState() == IDLE]]></EnableExpression>
						<ActionCode><![CDATA[run();]]></ActionCode>
					</BasicProperties>
					<ExtendedProperties>
						<Font Name="Dialog" Size="11" Style="0"/>
						<LabelText><![CDATA[Run]]></LabelText>
					</ExtendedProperties>
				</Control>
			</Presentation>

			<AfterIterationCode><![CDATA[iteration++;]]></AfterIterationCode>
			<AllowParallelEvaluations>false</AllowParallelEvaluations>
			<UseFreeformParameters>true</UseFreeformParameters>
			<NumberOfRuns>100</NumberOfRuns>
			<ModelTimeProperties>
				<StopOption><![CDATA[Stop at specified time]]></StopOption>
				<InitialDate><![CDATA[1517866200000]]></InitialDate>	
				<InitialTime><![CDATA[0.0]]></InitialTime>	
				<FinalDate><![CDATA[1518048000000]]></FinalDate>	
				<FinalTime><![CDATA[3030.0]]></FinalTime>	
			</ModelTimeProperties>
			<PresentationProperties>
				<EnableZoomAndPanning>true</EnableZoomAndPanning>
				<Title><![CDATA[NGIMainPV2 : ParametersVariation]]></Title>
				<EnableDeveloperPanel>true</EnableDeveloperPanel>
				<ShowDeveloperPanelOnStart>false</ShowDeveloperPanelOnStart>
			</PresentationProperties>
			<ReplicationsProperties>
				<UseReplication>false</UseReplication>
				<FixedReplicationsNumber>true</FixedReplicationsNumber>
				<ReplicationPerIteration>10</ReplicationPerIteration>
				<MinimumReplication>2</MinimumReplication>
				<MaximumReplication>10</MaximumReplication>
				<ConfidenceLevel>LEVEL_80</ConfidenceLevel>
				<ErrorPercent>0.5</ErrorPercent>
				<ExpressionForConfidenceComputation><![CDATA[0]]></ExpressionForConfidenceComputation>
			</ReplicationsProperties>
		</ParamVariationExperiment>	
	</Experiments>
	<ModelResources>
		<Resource>
			<Path><![CDATA[EnergyMain2018.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
		<Resource>
			<Path><![CDATA[RandomRouteChoiceParameterVariation.xlsx]]></Path>
			<ReferencedFromUserCode>false</ReferencedFromUserCode>
		</Resource>
	</ModelResources>
    <RequiredLibraryReference>
		<LibraryName><![CDATA[com.anylogic.libraries.modules.markup_descriptors]]></LibraryName>
		<VersionMajor>1</VersionMajor>
		<VersionMinor>0</VersionMinor>
		<VersionBuild>0</VersionBuild>
    </RequiredLibraryReference>
</Model>
</AnyLogicWorkspace>